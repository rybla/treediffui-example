{
  "version": 3,
  "sources": ["../output/Main/foreign.js", "../output/Control.Semigroupoid/index.js", "../output/Control.Category/index.js", "../output/Data.Boolean/index.js", "../output/Data.Function/index.js", "../output/Data.Functor/foreign.js", "../output/Data.Unit/foreign.js", "../output/Data.Functor/index.js", "../output/Control.Apply/index.js", "../output/Control.Applicative/index.js", "../output/Data.Array/foreign.js", "../output/Data.Semigroup/foreign.js", "../output/Data.Semigroup/index.js", "../output/Control.Bind/index.js", "../output/Control.Monad/index.js", "../output/Data.Bounded/foreign.js", "../output/Data.Show/index.js", "../output/Data.Maybe/index.js", "../output/Data.Monoid/index.js", "../output/Effect/foreign.js", "../output/Effect/index.js", "../output/Effect.Ref/foreign.js", "../output/Effect.Ref/index.js", "../output/Data.Foldable/foreign.js", "../output/Data.Foldable/index.js", "../output/Data.Function.Uncurried/foreign.js", "../output/Data.Traversable/foreign.js", "../output/Data.Traversable/index.js", "../output/Data.Array/index.js", "../output/Effect.Class/index.js", "../output/Effect.Console/foreign.js", "../output/Effect.Class.Console/index.js", "../output/Partial.Unsafe/foreign.js", "../output/Partial/foreign.js", "../output/Partial/index.js", "../output/Partial.Unsafe/index.js", "../output/Main/index.js"],
  "sourcesContent": ["const keysDown = {}\n\nwindow.addEventListener('keydown', (event) => {\n    keysDown[event.key] = true\n})\n\nwindow.addEventListener('keyup', (event) => {\n    keysDown[event.key] = false\n})\n\nfunction isKeyDown(key) {\n    return keysDown[key] || false\n}\n\n// Usage\nif (isKeyDown('ArrowRight')) {\n    console.log('Right arrow key is held down!')\n}\n\n\nexport const getContainer = () => {\n    console.log(\"[getContainer]\")\n    return document.getElementById('container')\n}\n\nexport const getElement = (id) => () => {\n    console.log(\"[getElement]\", JSON.stringify({ id }))\n    return document.getElementById(id)\n}\n\nexport const createElement = (label) => (kids) => () => {\n    console.log(\"[createElement]\", JSON.stringify({ label }))\n    const e = document.createElement('div')\n    e.classList.add('node')\n    e.id = label\n    const l = document.createElement('div')\n    l.classList.add('label')\n    l.innerText = label\n    e.appendChild(l)\n    kids.forEach(kid => e.appendChild(kid))\n    return e\n}\n\nexport const addKid = (parent) => (kid) => () => {\n    console.log(\"[addKid]\")\n    return parent.appendChild(kid)\n}\n\nexport const getParent = (kid) => () => {\n    console.log(\"[getParent]\")\n    return kid.parentElement\n}\n\nexport const replaceKid = (parent) => args => () => {\n    console.log(\"[replaceKid]\")\n    return parent.replaceChild(args.new, args.old)\n}\n\n// export const cloneElement = (e) => () => e.cloneNode()\n\nexport const createButton = ({ label, onclick }) => () => {\n    const e = document.createElement('button')\n    e.classList.add('node-control')\n    e.innerText = label\n    e.onclick = () => onclick()\n    return e\n}\n\nexport const removeKid = (parent) => (kid) => () => {\n    parent.removeChild(kid)\n}\n\nexport const getElementById = (id) => () => document.getElementById(id)\n\nexport const setTreeDisplay = (str) => () => {\n    const e = document.getElementById('tree_display')\n    e.innerText = str\n}\n\n// foreign import set_clipboard :: { tree:: Tree, element :: Element } -> Effect Unit\n// foreign import get_clipboard :: Effect { tree:: Tree, element :: Element }\nvar clipboard = undefined\nexport const set_clipboard = (v) => () => {\n    console.log(\"set_clipboard\")\n    clipboard = v\n}\nexport const get_clipboard = () => {\n    console.log(\"get_clipboard\")\n    return clipboard\n}\n", "// Generated by purs version 0.15.15\nvar semigroupoidFn = {\n    compose: function (f) {\n        return function (g) {\n            return function (x) {\n                return f(g(x));\n            };\n        };\n    }\n};\nvar compose = function (dict) {\n    return dict.compose;\n};\nvar composeFlipped = function (dictSemigroupoid) {\n    var compose1 = compose(dictSemigroupoid);\n    return function (f) {\n        return function (g) {\n            return compose1(g)(f);\n        };\n    };\n};\nexport {\n    compose,\n    composeFlipped,\n    semigroupoidFn\n};\n", "// Generated by purs version 0.15.15\nimport * as Control_Semigroupoid from \"../Control.Semigroupoid/index.js\";\nvar identity = function (dict) {\n    return dict.identity;\n};\nvar categoryFn = {\n    identity: function (x) {\n        return x;\n    },\n    Semigroupoid0: function () {\n        return Control_Semigroupoid.semigroupoidFn;\n    }\n};\nexport {\n    identity,\n    categoryFn\n};\nexport {\n    compose\n} from \"../Control.Semigroupoid/index.js\";\n", "// Generated by purs version 0.15.15\nvar otherwise = true;\nexport {\n    otherwise\n};\n", "// Generated by purs version 0.15.15\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nvar on = function (f) {\n    return function (g) {\n        return function (x) {\n            return function (y) {\n                return f(g(x))(g(y));\n            };\n        };\n    };\n};\nvar flip = function (f) {\n    return function (b) {\n        return function (a) {\n            return f(a)(b);\n        };\n    };\n};\nvar $$const = function (a) {\n    return function (v) {\n        return a;\n    };\n};\nvar applyN = function (f) {\n    var go = function ($copy_n) {\n        return function ($copy_acc) {\n            var $tco_var_n = $copy_n;\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(n, acc) {\n                if (n <= 0) {\n                    $tco_done = true;\n                    return acc;\n                };\n                if (Data_Boolean.otherwise) {\n                    $tco_var_n = n - 1 | 0;\n                    $copy_acc = f(acc);\n                    return;\n                };\n                throw new Error(\"Failed pattern match at Data.Function (line 107, column 3 - line 109, column 37): \" + [ n.constructor.name, acc.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($tco_var_n, $copy_acc);\n            };\n            return $tco_result;\n        };\n    };\n    return go;\n};\nvar applyFlipped = function (x) {\n    return function (f) {\n        return f(x);\n    };\n};\nvar apply = function (f) {\n    return function (x) {\n        return f(x);\n    };\n};\nexport {\n    flip,\n    $$const as const,\n    apply,\n    applyFlipped,\n    applyN,\n    on\n};\nexport {\n    compose,\n    identity\n} from \"../Control.Category/index.js\";\n", "export const arrayMap = function (f) {\n  return function (arr) {\n    var l = arr.length;\n    var result = new Array(l);\n    for (var i = 0; i < l; i++) {\n      result[i] = f(arr[i]);\n    }\n    return result;\n  };\n};\n", "export const unit = undefined;\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Semigroupoid from \"../Control.Semigroupoid/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar map = function (dict) {\n    return dict.map;\n};\nvar mapFlipped = function (dictFunctor) {\n    var map1 = map(dictFunctor);\n    return function (fa) {\n        return function (f) {\n            return map1(f)(fa);\n        };\n    };\n};\nvar $$void = function (dictFunctor) {\n    return map(dictFunctor)(Data_Function[\"const\"](Data_Unit.unit));\n};\nvar voidLeft = function (dictFunctor) {\n    var map1 = map(dictFunctor);\n    return function (f) {\n        return function (x) {\n            return map1(Data_Function[\"const\"](x))(f);\n        };\n    };\n};\nvar voidRight = function (dictFunctor) {\n    var map1 = map(dictFunctor);\n    return function (x) {\n        return map1(Data_Function[\"const\"](x));\n    };\n};\nvar functorProxy = {\n    map: function (v) {\n        return function (v1) {\n            return Type_Proxy[\"Proxy\"].value;\n        };\n    }\n};\nvar functorFn = {\n    map: /* #__PURE__ */ Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)\n};\nvar functorArray = {\n    map: $foreign.arrayMap\n};\nvar flap = function (dictFunctor) {\n    var map1 = map(dictFunctor);\n    return function (ff) {\n        return function (x) {\n            return map1(function (f) {\n                return f(x);\n            })(ff);\n        };\n    };\n};\nexport {\n    map,\n    mapFlipped,\n    $$void as void,\n    voidRight,\n    voidLeft,\n    flap,\n    functorFn,\n    functorArray,\n    functorProxy\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar applyProxy = {\n    apply: function (v) {\n        return function (v1) {\n            return Type_Proxy[\"Proxy\"].value;\n        };\n    },\n    Functor0: function () {\n        return Data_Functor.functorProxy;\n    }\n};\nvar applyFn = {\n    apply: function (f) {\n        return function (g) {\n            return function (x) {\n                return f(x)(g(x));\n            };\n        };\n    },\n    Functor0: function () {\n        return Data_Functor.functorFn;\n    }\n};\nvar applyArray = {\n    apply: $foreign.arrayApply,\n    Functor0: function () {\n        return Data_Functor.functorArray;\n    }\n};\nvar apply = function (dict) {\n    return dict.apply;\n};\nvar applyFirst = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (a) {\n        return function (b) {\n            return apply1(map(Data_Function[\"const\"])(a))(b);\n        };\n    };\n};\nvar applySecond = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (a) {\n        return function (b) {\n            return apply1(map(Data_Function[\"const\"](identity))(a))(b);\n        };\n    };\n};\nvar lift2 = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return apply1(map(f)(a))(b);\n            };\n        };\n    };\n};\nvar lift3 = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return apply1(apply1(map(f)(a))(b))(c);\n                };\n            };\n        };\n    };\n};\nvar lift4 = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return function (d) {\n                        return apply1(apply1(apply1(map(f)(a))(b))(c))(d);\n                    };\n                };\n            };\n        };\n    };\n};\nvar lift5 = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return function (d) {\n                        return function (e) {\n                            return apply1(apply1(apply1(apply1(map(f)(a))(b))(c))(d))(e);\n                        };\n                    };\n                };\n            };\n        };\n    };\n};\nexport {\n    apply,\n    applyFirst,\n    applySecond,\n    lift2,\n    lift3,\n    lift4,\n    lift5,\n    applyFn,\n    applyArray,\n    applyProxy\n};\nexport {\n    map,\n    void\n} from \"../Data.Functor/index.js\";\n", "// Generated by purs version 0.15.15\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar pure = function (dict) {\n    return dict.pure;\n};\nvar unless = function (dictApplicative) {\n    var pure1 = pure(dictApplicative);\n    return function (v) {\n        return function (v1) {\n            if (!v) {\n                return v1;\n            };\n            if (v) {\n                return pure1(Data_Unit.unit);\n            };\n            throw new Error(\"Failed pattern match at Control.Applicative (line 68, column 1 - line 68, column 65): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    };\n};\nvar when = function (dictApplicative) {\n    var pure1 = pure(dictApplicative);\n    return function (v) {\n        return function (v1) {\n            if (v) {\n                return v1;\n            };\n            if (!v) {\n                return pure1(Data_Unit.unit);\n            };\n            throw new Error(\"Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    };\n};\nvar liftA1 = function (dictApplicative) {\n    var apply = Control_Apply.apply(dictApplicative.Apply0());\n    var pure1 = pure(dictApplicative);\n    return function (f) {\n        return function (a) {\n            return apply(pure1(f))(a);\n        };\n    };\n};\nvar applicativeProxy = {\n    pure: function (v) {\n        return Type_Proxy[\"Proxy\"].value;\n    },\n    Apply0: function () {\n        return Control_Apply.applyProxy;\n    }\n};\nvar applicativeFn = {\n    pure: function (x) {\n        return function (v) {\n            return x;\n        };\n    },\n    Apply0: function () {\n        return Control_Apply.applyFn;\n    }\n};\nvar applicativeArray = {\n    pure: function (x) {\n        return [ x ];\n    },\n    Apply0: function () {\n        return Control_Apply.applyArray;\n    }\n};\nexport {\n    pure,\n    liftA1,\n    unless,\n    when,\n    applicativeFn,\n    applicativeArray,\n    applicativeProxy\n};\nexport {\n    apply\n} from \"../Control.Apply/index.js\";\nexport {\n    map,\n    void\n} from \"../Data.Functor/index.js\";\n", "//------------------------------------------------------------------------------\n// Array creation --------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const rangeImpl = function (start, end) {\n  var step = start > end ? -1 : 1;\n  var result = new Array(step * (end - start) + 1);\n  var i = start, n = 0;\n  while (i !== end) {\n    result[n++] = i;\n    i += step;\n  }\n  result[n] = i;\n  return result;\n};\n\nvar replicateFill = function (count, value) {\n  if (count < 1) {\n    return [];\n  }\n  var result = new Array(count);\n  return result.fill(value);\n};\n\nvar replicatePolyfill = function (count, value) {\n  var result = [];\n  var n = 0;\n  for (var i = 0; i < count; i++) {\n    result[n++] = value;\n  }\n  return result;\n};\n\n// In browsers that have Array.prototype.fill we use it, as it's faster.\nexport const replicateImpl = typeof Array.prototype.fill === \"function\" ? replicateFill : replicatePolyfill;\n\nexport const fromFoldableImpl = (function () {\n  function Cons(head, tail) {\n    this.head = head;\n    this.tail = tail;\n  }\n  var emptyList = {};\n\n  function curryCons(head) {\n    return function (tail) {\n      return new Cons(head, tail);\n    };\n  }\n\n  function listToArray(list) {\n    var result = [];\n    var count = 0;\n    var xs = list;\n    while (xs !== emptyList) {\n      result[count++] = xs.head;\n      xs = xs.tail;\n    }\n    return result;\n  }\n\n  return function (foldr, xs) {\n    return listToArray(foldr(curryCons)(emptyList)(xs));\n  };\n})();\n\n//------------------------------------------------------------------------------\n// Array size ------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const length = function (xs) {\n  return xs.length;\n};\n\n//------------------------------------------------------------------------------\n// Non-indexed reads -----------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const unconsImpl = function (empty, next, xs) {\n  return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));\n};\n\n//------------------------------------------------------------------------------\n// Indexed operations ----------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const indexImpl = function (just, nothing, xs, i) {\n  return i < 0 || i >= xs.length ? nothing :  just(xs[i]);\n};\n\nexport const findMapImpl = function (nothing, isJust, f, xs) {\n  for (var i = 0; i < xs.length; i++) {\n    var result = f(xs[i]);\n    if (isJust(result)) return result;\n  }\n  return nothing;\n};\n\nexport const findIndexImpl = function (just, nothing, f, xs) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (f(xs[i])) return just(i);\n  }\n  return nothing;\n};\n\nexport const findLastIndexImpl = function (just, nothing, f, xs) {\n  for (var i = xs.length - 1; i >= 0; i--) {\n    if (f(xs[i])) return just(i);\n  }\n  return nothing;\n};\n\nexport const _insertAt = function (just, nothing, i, a, l) {\n  if (i < 0 || i > l.length) return nothing;\n  var l1 = l.slice();\n  l1.splice(i, 0, a);\n  return just(l1);\n};\n\nexport const _deleteAt = function (just, nothing, i, l) {\n  if (i < 0 || i >= l.length) return nothing;\n  var l1 = l.slice();\n  l1.splice(i, 1);\n  return just(l1);\n};\n\nexport const _updateAt = function (just, nothing, i, a, l) {\n  if (i < 0 || i >= l.length) return nothing;\n  var l1 = l.slice();\n  l1[i] = a;\n  return just(l1);\n};\n\n//------------------------------------------------------------------------------\n// Transformations -------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const reverse = function (l) {\n  return l.slice().reverse();\n};\n\nexport const concat = function (xss) {\n  if (xss.length <= 10000) {\n    // This method is faster, but it crashes on big arrays.\n    // So we use it when can and fallback to simple variant otherwise.\n    return Array.prototype.concat.apply([], xss);\n  }\n\n  var result = [];\n  for (var i = 0, l = xss.length; i < l; i++) {\n    var xs = xss[i];\n    for (var j = 0, m = xs.length; j < m; j++) {\n      result.push(xs[j]);\n    }\n  }\n  return result;\n};\n\nexport const filterImpl = function (f, xs) {\n  return xs.filter(f);\n};\n\nexport const partitionImpl = function (f, xs) {\n  var yes = [];\n  var no  = [];\n  for (var i = 0; i < xs.length; i++) {\n    var x = xs[i];\n    if (f(x))\n      yes.push(x);\n    else\n      no.push(x);\n  }\n  return { yes: yes, no: no };\n};\n\nexport const scanlImpl = function (f, b, xs) {\n  var len = xs.length;\n  var acc = b;\n  var out = new Array(len);\n  for (var i = 0; i < len; i++) {\n    acc = f(acc)(xs[i]);\n    out[i] = acc;\n  }\n  return out;\n};\n\nexport const scanrImpl = function (f, b, xs) {\n  var len = xs.length;\n  var acc = b;\n  var out = new Array(len);\n  for (var i = len - 1; i >= 0; i--) {\n    acc = f(xs[i])(acc);\n    out[i] = acc;\n  }\n  return out;\n};\n\n//------------------------------------------------------------------------------\n// Sorting ---------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const sortByImpl = (function () {\n  function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {\n    var mid;\n    var i;\n    var j;\n    var k;\n    var x;\n    var y;\n    var c;\n\n    mid = from + ((to - from) >> 1);\n    if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);\n    if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);\n\n    i = from;\n    j = mid;\n    k = from;\n    while (i < mid && j < to) {\n      x = xs2[i];\n      y = xs2[j];\n      c = fromOrdering(compare(x)(y));\n      if (c > 0) {\n        xs1[k++] = y;\n        ++j;\n      }\n      else {\n        xs1[k++] = x;\n        ++i;\n      }\n    }\n    while (i < mid) {\n      xs1[k++] = xs2[i++];\n    }\n    while (j < to) {\n      xs1[k++] = xs2[j++];\n    }\n  }\n\n  return function (compare, fromOrdering, xs) {\n    var out;\n\n    if (xs.length < 2) return xs;\n\n    out = xs.slice(0);\n    mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);\n\n    return out;\n  };\n})();\n\n//------------------------------------------------------------------------------\n// Subarrays -------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const sliceImpl = function (s, e, l) {\n  return l.slice(s, e);\n};\n\n//------------------------------------------------------------------------------\n// Zipping ---------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const zipWithImpl = function (f, xs, ys) {\n  var l = xs.length < ys.length ? xs.length : ys.length;\n  var result = new Array(l);\n  for (var i = 0; i < l; i++) {\n    result[i] = f(xs[i])(ys[i]);\n  }\n  return result;\n};\n\n//------------------------------------------------------------------------------\n// Folding ---------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const anyImpl = function (p, xs) {\n  var len = xs.length;\n  for (var i = 0; i < len; i++) {\n    if (p(xs[i])) return true;\n  }\n  return false;\n};\n\nexport const allImpl = function (p, xs) {\n  var len = xs.length;\n  for (var i = 0; i < len; i++) {\n    if (!p(xs[i])) return false;\n  }\n  return true;\n};\n\n//------------------------------------------------------------------------------\n// Partial ---------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const unsafeIndexImpl = function (xs, n) {\n  return xs[n];\n};\n", "export const concatString = function (s1) {\n  return function (s2) {\n    return s1 + s2;\n  };\n};\n\nexport const concatArray = function (xs) {\n  return function (ys) {\n    if (xs.length === 0) return ys;\n    if (ys.length === 0) return xs;\n    return xs.concat(ys);\n  };\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Data_Void from \"../Data.Void/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar semigroupVoid = {\n    append: function (v) {\n        return Data_Void.absurd;\n    }\n};\nvar semigroupUnit = {\n    append: function (v) {\n        return function (v1) {\n            return Data_Unit.unit;\n        };\n    }\n};\nvar semigroupString = {\n    append: $foreign.concatString\n};\nvar semigroupRecordNil = {\n    appendRecord: function (v) {\n        return function (v1) {\n            return function (v2) {\n                return {};\n            };\n        };\n    }\n};\nvar semigroupProxy = {\n    append: function (v) {\n        return function (v1) {\n            return Type_Proxy[\"Proxy\"].value;\n        };\n    }\n};\nvar semigroupArray = {\n    append: $foreign.concatArray\n};\nvar appendRecord = function (dict) {\n    return dict.appendRecord;\n};\nvar semigroupRecord = function () {\n    return function (dictSemigroupRecord) {\n        return {\n            append: appendRecord(dictSemigroupRecord)(Type_Proxy[\"Proxy\"].value)\n        };\n    };\n};\nvar append = function (dict) {\n    return dict.append;\n};\nvar semigroupFn = function (dictSemigroup) {\n    var append1 = append(dictSemigroup);\n    return {\n        append: function (f) {\n            return function (g) {\n                return function (x) {\n                    return append1(f(x))(g(x));\n                };\n            };\n        }\n    };\n};\nvar semigroupRecordCons = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    return function () {\n        return function (dictSemigroupRecord) {\n            var appendRecord1 = appendRecord(dictSemigroupRecord);\n            return function (dictSemigroup) {\n                var append1 = append(dictSemigroup);\n                return {\n                    appendRecord: function (v) {\n                        return function (ra) {\n                            return function (rb) {\n                                var tail = appendRecord1(Type_Proxy[\"Proxy\"].value)(ra)(rb);\n                                var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                                var insert = Record_Unsafe.unsafeSet(key);\n                                var get = Record_Unsafe.unsafeGet(key);\n                                return insert(append1(get(ra))(get(rb)))(tail);\n                            };\n                        };\n                    }\n                };\n            };\n        };\n    };\n};\nexport {\n    append,\n    appendRecord,\n    semigroupString,\n    semigroupUnit,\n    semigroupVoid,\n    semigroupFn,\n    semigroupArray,\n    semigroupProxy,\n    semigroupRecord,\n    semigroupRecordNil,\n    semigroupRecordCons\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar discard = function (dict) {\n    return dict.discard;\n};\nvar bindProxy = {\n    bind: function (v) {\n        return function (v1) {\n            return Type_Proxy[\"Proxy\"].value;\n        };\n    },\n    Apply0: function () {\n        return Control_Apply.applyProxy;\n    }\n};\nvar bindFn = {\n    bind: function (m) {\n        return function (f) {\n            return function (x) {\n                return f(m(x))(x);\n            };\n        };\n    },\n    Apply0: function () {\n        return Control_Apply.applyFn;\n    }\n};\nvar bindArray = {\n    bind: $foreign.arrayBind,\n    Apply0: function () {\n        return Control_Apply.applyArray;\n    }\n};\nvar bind = function (dict) {\n    return dict.bind;\n};\nvar bindFlipped = function (dictBind) {\n    return Data_Function.flip(bind(dictBind));\n};\nvar composeKleisliFlipped = function (dictBind) {\n    var bindFlipped1 = bindFlipped(dictBind);\n    return function (f) {\n        return function (g) {\n            return function (a) {\n                return bindFlipped1(f)(g(a));\n            };\n        };\n    };\n};\nvar composeKleisli = function (dictBind) {\n    var bind1 = bind(dictBind);\n    return function (f) {\n        return function (g) {\n            return function (a) {\n                return bind1(f(a))(g);\n            };\n        };\n    };\n};\nvar discardProxy = {\n    discard: function (dictBind) {\n        return bind(dictBind);\n    }\n};\nvar discardUnit = {\n    discard: function (dictBind) {\n        return bind(dictBind);\n    }\n};\nvar ifM = function (dictBind) {\n    var bind1 = bind(dictBind);\n    return function (cond) {\n        return function (t) {\n            return function (f) {\n                return bind1(cond)(function (cond$prime) {\n                    if (cond$prime) {\n                        return t;\n                    };\n                    return f;\n                });\n            };\n        };\n    };\n};\nvar join = function (dictBind) {\n    var bind1 = bind(dictBind);\n    return function (m) {\n        return bind1(m)(identity);\n    };\n};\nexport {\n    bind,\n    bindFlipped,\n    discard,\n    join,\n    composeKleisli,\n    composeKleisliFlipped,\n    ifM,\n    bindFn,\n    bindArray,\n    bindProxy,\n    discardUnit,\n    discardProxy\n};\nexport {\n    liftA1,\n    pure,\n    unless,\n    when\n} from \"../Control.Applicative/index.js\";\nexport {\n    apply\n} from \"../Control.Apply/index.js\";\nexport {\n    map,\n    void\n} from \"../Data.Functor/index.js\";\n", "// Generated by purs version 0.15.15\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nvar whenM = function (dictMonad) {\n    var bind = Control_Bind.bind(dictMonad.Bind1());\n    var when = Control_Applicative.when(dictMonad.Applicative0());\n    return function (mb) {\n        return function (m) {\n            return bind(mb)(function (b) {\n                return when(b)(m);\n            });\n        };\n    };\n};\nvar unlessM = function (dictMonad) {\n    var bind = Control_Bind.bind(dictMonad.Bind1());\n    var unless = Control_Applicative.unless(dictMonad.Applicative0());\n    return function (mb) {\n        return function (m) {\n            return bind(mb)(function (b) {\n                return unless(b)(m);\n            });\n        };\n    };\n};\nvar monadProxy = {\n    Applicative0: function () {\n        return Control_Applicative.applicativeProxy;\n    },\n    Bind1: function () {\n        return Control_Bind.bindProxy;\n    }\n};\nvar monadFn = {\n    Applicative0: function () {\n        return Control_Applicative.applicativeFn;\n    },\n    Bind1: function () {\n        return Control_Bind.bindFn;\n    }\n};\nvar monadArray = {\n    Applicative0: function () {\n        return Control_Applicative.applicativeArray;\n    },\n    Bind1: function () {\n        return Control_Bind.bindArray;\n    }\n};\nvar liftM1 = function (dictMonad) {\n    var bind = Control_Bind.bind(dictMonad.Bind1());\n    var pure = Control_Applicative.pure(dictMonad.Applicative0());\n    return function (f) {\n        return function (a) {\n            return bind(a)(function (a$prime) {\n                return pure(f(a$prime));\n            });\n        };\n    };\n};\nvar ap = function (dictMonad) {\n    var bind = Control_Bind.bind(dictMonad.Bind1());\n    var pure = Control_Applicative.pure(dictMonad.Applicative0());\n    return function (f) {\n        return function (a) {\n            return bind(f)(function (f$prime) {\n                return bind(a)(function (a$prime) {\n                    return pure(f$prime(a$prime));\n                });\n            });\n        };\n    };\n};\nexport {\n    liftM1,\n    whenM,\n    unlessM,\n    ap,\n    monadFn,\n    monadArray,\n    monadProxy\n};\nexport {\n    liftA1,\n    pure,\n    unless,\n    when\n} from \"../Control.Applicative/index.js\";\nexport {\n    apply\n} from \"../Control.Apply/index.js\";\nexport {\n    bind,\n    ifM,\n    join\n} from \"../Control.Bind/index.js\";\nexport {\n    map,\n    void\n} from \"../Data.Functor/index.js\";\n", "export const topInt = 2147483647;\nexport const bottomInt = -2147483648;\n\nexport const topChar = String.fromCharCode(65535);\nexport const bottomChar = String.fromCharCode(0);\n\nexport const topNumber = Number.POSITIVE_INFINITY;\nexport const bottomNumber = Number.NEGATIVE_INFINITY;\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Data_Void from \"../Data.Void/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar showVoid = {\n    show: Data_Void.absurd\n};\nvar showUnit = {\n    show: function (v) {\n        return \"unit\";\n    }\n};\nvar showString = {\n    show: $foreign.showStringImpl\n};\nvar showRecordFieldsNil = {\n    showRecordFields: function (v) {\n        return function (v1) {\n            return \"\";\n        };\n    }\n};\nvar showRecordFields = function (dict) {\n    return dict.showRecordFields;\n};\nvar showRecord = function () {\n    return function () {\n        return function (dictShowRecordFields) {\n            var showRecordFields1 = showRecordFields(dictShowRecordFields);\n            return {\n                show: function (record) {\n                    return \"{\" + (showRecordFields1(Type_Proxy[\"Proxy\"].value)(record) + \"}\");\n                }\n            };\n        };\n    };\n};\nvar showProxy = {\n    show: function (v) {\n        return \"Proxy\";\n    }\n};\nvar showNumber = {\n    show: $foreign.showNumberImpl\n};\nvar showInt = {\n    show: $foreign.showIntImpl\n};\nvar showChar = {\n    show: $foreign.showCharImpl\n};\nvar showBoolean = {\n    show: function (v) {\n        if (v) {\n            return \"true\";\n        };\n        if (!v) {\n            return \"false\";\n        };\n        throw new Error(\"Failed pattern match at Data.Show (line 29, column 1 - line 31, column 23): \" + [ v.constructor.name ]);\n    }\n};\nvar show = function (dict) {\n    return dict.show;\n};\nvar showArray = function (dictShow) {\n    return {\n        show: $foreign.showArrayImpl(show(dictShow))\n    };\n};\nvar showRecordFieldsCons = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    return function (dictShowRecordFields) {\n        var showRecordFields1 = showRecordFields(dictShowRecordFields);\n        return function (dictShow) {\n            var show1 = show(dictShow);\n            return {\n                showRecordFields: function (v) {\n                    return function (record) {\n                        var tail = showRecordFields1(Type_Proxy[\"Proxy\"].value)(record);\n                        var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                        var focus = Record_Unsafe.unsafeGet(key)(record);\n                        return \" \" + (key + (\": \" + (show1(focus) + (\",\" + tail))));\n                    };\n                }\n            };\n        };\n    };\n};\nvar showRecordFieldsConsNil = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    return function (dictShow) {\n        var show1 = show(dictShow);\n        return {\n            showRecordFields: function (v) {\n                return function (record) {\n                    var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                    var focus = Record_Unsafe.unsafeGet(key)(record);\n                    return \" \" + (key + (\": \" + (show1(focus) + \" \")));\n                };\n            }\n        };\n    };\n};\nexport {\n    show,\n    showRecordFields,\n    showUnit,\n    showBoolean,\n    showInt,\n    showNumber,\n    showChar,\n    showString,\n    showArray,\n    showProxy,\n    showVoid,\n    showRecord,\n    showRecordFieldsNil,\n    showRecordFieldsConsNil,\n    showRecordFieldsCons\n};\n", "// Generated by purs version 0.15.15\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Bounded from \"../Data.Bounded/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Functor_Invariant from \"../Data.Functor.Invariant/index.js\";\nimport * as Data_Generic_Rep from \"../Data.Generic.Rep/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Semiring from \"../Data.Semiring/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar Nothing = /* #__PURE__ */ (function () {\n    function Nothing() {\n\n    };\n    Nothing.value = new Nothing();\n    return Nothing;\n})();\nvar Just = /* #__PURE__ */ (function () {\n    function Just(value0) {\n        this.value0 = value0;\n    };\n    Just.create = function (value0) {\n        return new Just(value0);\n    };\n    return Just;\n})();\nvar showMaybe = function (dictShow) {\n    var show = Data_Show.show(dictShow);\n    return {\n        show: function (v) {\n            if (v instanceof Just) {\n                return \"(Just \" + (show(v.value0) + \")\");\n            };\n            if (v instanceof Nothing) {\n                return \"Nothing\";\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 223, column 1 - line 225, column 28): \" + [ v.constructor.name ]);\n        }\n    };\n};\nvar semigroupMaybe = function (dictSemigroup) {\n    var append1 = Data_Semigroup.append(dictSemigroup);\n    return {\n        append: function (v) {\n            return function (v1) {\n                if (v instanceof Nothing) {\n                    return v1;\n                };\n                if (v1 instanceof Nothing) {\n                    return v;\n                };\n                if (v instanceof Just && v1 instanceof Just) {\n                    return new Just(append1(v.value0)(v1.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Maybe (line 182, column 1 - line 185, column 43): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        }\n    };\n};\nvar optional = function (dictAlt) {\n    var alt = Control_Alt.alt(dictAlt);\n    var map1 = Data_Functor.map(dictAlt.Functor0());\n    return function (dictApplicative) {\n        var pure = Control_Applicative.pure(dictApplicative);\n        return function (a) {\n            return alt(map1(Just.create)(a))(pure(Nothing.value));\n        };\n    };\n};\nvar monoidMaybe = function (dictSemigroup) {\n    var semigroupMaybe1 = semigroupMaybe(dictSemigroup);\n    return {\n        mempty: Nothing.value,\n        Semigroup0: function () {\n            return semigroupMaybe1;\n        }\n    };\n};\nvar maybe$prime = function (v) {\n    return function (v1) {\n        return function (v2) {\n            if (v2 instanceof Nothing) {\n                return v(Data_Unit.unit);\n            };\n            if (v2 instanceof Just) {\n                return v1(v2.value0);\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 250, column 1 - line 250, column 62): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n        };\n    };\n};\nvar maybe = function (v) {\n    return function (v1) {\n        return function (v2) {\n            if (v2 instanceof Nothing) {\n                return v;\n            };\n            if (v2 instanceof Just) {\n                return v1(v2.value0);\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n        };\n    };\n};\nvar isNothing = /* #__PURE__ */ maybe(true)(/* #__PURE__ */ Data_Function[\"const\"](false));\nvar isJust = /* #__PURE__ */ maybe(false)(/* #__PURE__ */ Data_Function[\"const\"](true));\nvar genericMaybe = {\n    to: function (x) {\n        if (x instanceof Data_Generic_Rep.Inl) {\n            return Nothing.value;\n        };\n        if (x instanceof Data_Generic_Rep.Inr) {\n            return new Just(x.value0);\n        };\n        throw new Error(\"Failed pattern match at Data.Maybe (line 227, column 1 - line 227, column 52): \" + [ x.constructor.name ]);\n    },\n    from: function (x) {\n        if (x instanceof Nothing) {\n            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);\n        };\n        if (x instanceof Just) {\n            return new Data_Generic_Rep.Inr(x.value0);\n        };\n        throw new Error(\"Failed pattern match at Data.Maybe (line 227, column 1 - line 227, column 52): \" + [ x.constructor.name ]);\n    }\n};\nvar functorMaybe = {\n    map: function (v) {\n        return function (v1) {\n            if (v1 instanceof Just) {\n                return new Just(v(v1.value0));\n            };\n            return Nothing.value;\n        };\n    }\n};\nvar map = /* #__PURE__ */ Data_Functor.map(functorMaybe);\nvar invariantMaybe = {\n    imap: /* #__PURE__ */ Data_Functor_Invariant.imapF(functorMaybe)\n};\nvar fromMaybe$prime = function (a) {\n    return maybe$prime(a)(identity);\n};\nvar fromMaybe = function (a) {\n    return maybe(a)(identity);\n};\nvar fromJust = function () {\n    return function (v) {\n        if (v instanceof Just) {\n            return v.value0;\n        };\n        throw new Error(\"Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): \" + [ v.constructor.name ]);\n    };\n};\nvar extendMaybe = {\n    extend: function (v) {\n        return function (v1) {\n            if (v1 instanceof Nothing) {\n                return Nothing.value;\n            };\n            return new Just(v(v1));\n        };\n    },\n    Functor0: function () {\n        return functorMaybe;\n    }\n};\nvar eqMaybe = function (dictEq) {\n    var eq = Data_Eq.eq(dictEq);\n    return {\n        eq: function (x) {\n            return function (y) {\n                if (x instanceof Nothing && y instanceof Nothing) {\n                    return true;\n                };\n                if (x instanceof Just && y instanceof Just) {\n                    return eq(x.value0)(y.value0);\n                };\n                return false;\n            };\n        }\n    };\n};\nvar ordMaybe = function (dictOrd) {\n    var compare = Data_Ord.compare(dictOrd);\n    var eqMaybe1 = eqMaybe(dictOrd.Eq0());\n    return {\n        compare: function (x) {\n            return function (y) {\n                if (x instanceof Nothing && y instanceof Nothing) {\n                    return Data_Ordering.EQ.value;\n                };\n                if (x instanceof Nothing) {\n                    return Data_Ordering.LT.value;\n                };\n                if (y instanceof Nothing) {\n                    return Data_Ordering.GT.value;\n                };\n                if (x instanceof Just && y instanceof Just) {\n                    return compare(x.value0)(y.value0);\n                };\n                throw new Error(\"Failed pattern match at Data.Maybe (line 0, column 0 - line 0, column 0): \" + [ x.constructor.name, y.constructor.name ]);\n            };\n        },\n        Eq0: function () {\n            return eqMaybe1;\n        }\n    };\n};\nvar eq1Maybe = {\n    eq1: function (dictEq) {\n        return Data_Eq.eq(eqMaybe(dictEq));\n    }\n};\nvar ord1Maybe = {\n    compare1: function (dictOrd) {\n        return Data_Ord.compare(ordMaybe(dictOrd));\n    },\n    Eq10: function () {\n        return eq1Maybe;\n    }\n};\nvar boundedMaybe = function (dictBounded) {\n    var ordMaybe1 = ordMaybe(dictBounded.Ord0());\n    return {\n        top: new Just(Data_Bounded.top(dictBounded)),\n        bottom: Nothing.value,\n        Ord0: function () {\n            return ordMaybe1;\n        }\n    };\n};\nvar applyMaybe = {\n    apply: function (v) {\n        return function (v1) {\n            if (v instanceof Just) {\n                return map(v.value0)(v1);\n            };\n            if (v instanceof Nothing) {\n                return Nothing.value;\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    },\n    Functor0: function () {\n        return functorMaybe;\n    }\n};\nvar apply = /* #__PURE__ */ Control_Apply.apply(applyMaybe);\nvar bindMaybe = {\n    bind: function (v) {\n        return function (v1) {\n            if (v instanceof Just) {\n                return v1(v.value0);\n            };\n            if (v instanceof Nothing) {\n                return Nothing.value;\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    },\n    Apply0: function () {\n        return applyMaybe;\n    }\n};\nvar semiringMaybe = function (dictSemiring) {\n    var add = Data_Semiring.add(dictSemiring);\n    var mul = Data_Semiring.mul(dictSemiring);\n    return {\n        zero: Nothing.value,\n        one: new Just(Data_Semiring.one(dictSemiring)),\n        add: function (v) {\n            return function (v1) {\n                if (v instanceof Nothing) {\n                    return v1;\n                };\n                if (v1 instanceof Nothing) {\n                    return v;\n                };\n                if (v instanceof Just && v1 instanceof Just) {\n                    return new Just(add(v.value0)(v1.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Maybe (line 190, column 1 - line 198, column 28): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        },\n        mul: function (x) {\n            return function (y) {\n                return apply(map(mul)(x))(y);\n            };\n        }\n    };\n};\nvar applicativeMaybe = /* #__PURE__ */ (function () {\n    return {\n        pure: Just.create,\n        Apply0: function () {\n            return applyMaybe;\n        }\n    };\n})();\nvar monadMaybe = {\n    Applicative0: function () {\n        return applicativeMaybe;\n    },\n    Bind1: function () {\n        return bindMaybe;\n    }\n};\nvar altMaybe = {\n    alt: function (v) {\n        return function (v1) {\n            if (v instanceof Nothing) {\n                return v1;\n            };\n            return v;\n        };\n    },\n    Functor0: function () {\n        return functorMaybe;\n    }\n};\nvar plusMaybe = /* #__PURE__ */ (function () {\n    return {\n        empty: Nothing.value,\n        Alt0: function () {\n            return altMaybe;\n        }\n    };\n})();\nvar alternativeMaybe = {\n    Applicative0: function () {\n        return applicativeMaybe;\n    },\n    Plus1: function () {\n        return plusMaybe;\n    }\n};\nexport {\n    Nothing,\n    Just,\n    maybe,\n    maybe$prime,\n    fromMaybe,\n    fromMaybe$prime,\n    isJust,\n    isNothing,\n    fromJust,\n    optional,\n    functorMaybe,\n    applyMaybe,\n    applicativeMaybe,\n    altMaybe,\n    plusMaybe,\n    alternativeMaybe,\n    bindMaybe,\n    monadMaybe,\n    extendMaybe,\n    invariantMaybe,\n    semigroupMaybe,\n    monoidMaybe,\n    semiringMaybe,\n    eqMaybe,\n    eq1Maybe,\n    ordMaybe,\n    ord1Maybe,\n    boundedMaybe,\n    showMaybe,\n    genericMaybe\n};\n", "// Generated by purs version 0.15.15\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nimport * as Data_EuclideanRing from \"../Data.EuclideanRing/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar semigroupRecord = /* #__PURE__ */ Data_Semigroup.semigroupRecord();\nvar mod = /* #__PURE__ */ Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt);\nvar div = /* #__PURE__ */ Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt);\nvar monoidUnit = {\n    mempty: Data_Unit.unit,\n    Semigroup0: function () {\n        return Data_Semigroup.semigroupUnit;\n    }\n};\nvar monoidString = {\n    mempty: \"\",\n    Semigroup0: function () {\n        return Data_Semigroup.semigroupString;\n    }\n};\nvar monoidRecordNil = {\n    memptyRecord: function (v) {\n        return {};\n    },\n    SemigroupRecord0: function () {\n        return Data_Semigroup.semigroupRecordNil;\n    }\n};\nvar monoidOrdering = /* #__PURE__ */ (function () {\n    return {\n        mempty: Data_Ordering.EQ.value,\n        Semigroup0: function () {\n            return Data_Ordering.semigroupOrdering;\n        }\n    };\n})();\nvar monoidArray = {\n    mempty: [  ],\n    Semigroup0: function () {\n        return Data_Semigroup.semigroupArray;\n    }\n};\nvar memptyRecord = function (dict) {\n    return dict.memptyRecord;\n};\nvar monoidRecord = function () {\n    return function (dictMonoidRecord) {\n        var semigroupRecord1 = semigroupRecord(dictMonoidRecord.SemigroupRecord0());\n        return {\n            mempty: memptyRecord(dictMonoidRecord)(Type_Proxy[\"Proxy\"].value),\n            Semigroup0: function () {\n                return semigroupRecord1;\n            }\n        };\n    };\n};\nvar mempty = function (dict) {\n    return dict.mempty;\n};\nvar monoidFn = function (dictMonoid) {\n    var mempty1 = mempty(dictMonoid);\n    var semigroupFn = Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());\n    return {\n        mempty: function (v) {\n            return mempty1;\n        },\n        Semigroup0: function () {\n            return semigroupFn;\n        }\n    };\n};\nvar monoidRecordCons = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    var semigroupRecordCons = Data_Semigroup.semigroupRecordCons(dictIsSymbol)();\n    return function (dictMonoid) {\n        var mempty1 = mempty(dictMonoid);\n        var Semigroup0 = dictMonoid.Semigroup0();\n        return function () {\n            return function (dictMonoidRecord) {\n                var memptyRecord1 = memptyRecord(dictMonoidRecord);\n                var semigroupRecordCons1 = semigroupRecordCons(dictMonoidRecord.SemigroupRecord0())(Semigroup0);\n                return {\n                    memptyRecord: function (v) {\n                        var tail = memptyRecord1(Type_Proxy[\"Proxy\"].value);\n                        var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                        var insert = Record_Unsafe.unsafeSet(key);\n                        return insert(mempty1)(tail);\n                    },\n                    SemigroupRecord0: function () {\n                        return semigroupRecordCons1;\n                    }\n                };\n            };\n        };\n    };\n};\nvar power = function (dictMonoid) {\n    var mempty1 = mempty(dictMonoid);\n    var append = Data_Semigroup.append(dictMonoid.Semigroup0());\n    return function (x) {\n        var go = function (p) {\n            if (p <= 0) {\n                return mempty1;\n            };\n            if (p === 1) {\n                return x;\n            };\n            if (mod(p)(2) === 0) {\n                var x$prime = go(div(p)(2));\n                return append(x$prime)(x$prime);\n            };\n            if (Data_Boolean.otherwise) {\n                var x$prime = go(div(p)(2));\n                return append(x$prime)(append(x$prime)(x));\n            };\n            throw new Error(\"Failed pattern match at Data.Monoid (line 88, column 3 - line 88, column 17): \" + [ p.constructor.name ]);\n        };\n        return go;\n    };\n};\nvar guard = function (dictMonoid) {\n    var mempty1 = mempty(dictMonoid);\n    return function (v) {\n        return function (v1) {\n            if (v) {\n                return v1;\n            };\n            if (!v) {\n                return mempty1;\n            };\n            throw new Error(\"Failed pattern match at Data.Monoid (line 96, column 1 - line 96, column 49): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    };\n};\nexport {\n    mempty,\n    power,\n    guard,\n    memptyRecord,\n    monoidUnit,\n    monoidOrdering,\n    monoidFn,\n    monoidString,\n    monoidArray,\n    monoidRecord,\n    monoidRecordNil,\n    monoidRecordCons\n};\n", "export const pureE = function (a) {\n  return function () {\n    return a;\n  };\n};\n\nexport const bindE = function (a) {\n  return function (f) {\n    return function () {\n      return f(a())();\n    };\n  };\n};\n\nexport const untilE = function (f) {\n  return function () {\n    while (!f());\n  };\n};\n\nexport const whileE = function (f) {\n  return function (a) {\n    return function () {\n      while (f()) {\n        a();\n      }\n    };\n  };\n};\n\nexport const forE = function (lo) {\n  return function (hi) {\n    return function (f) {\n      return function () {\n        for (var i = lo; i < hi; i++) {\n          f(i)();\n        }\n      };\n    };\n  };\n};\n\nexport const foreachE = function (as) {\n  return function (f) {\n    return function () {\n      for (var i = 0, l = as.length; i < l; i++) {\n        f(as[i])();\n      }\n    };\n  };\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Monad from \"../Control.Monad/index.js\";\nimport * as Data_Monoid from \"../Data.Monoid/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nvar $runtime_lazy = function (name, moduleName, init) {\n    var state = 0;\n    var val;\n    return function (lineNumber) {\n        if (state === 2) return val;\n        if (state === 1) throw new ReferenceError(name + \" was needed before it finished initializing (module \" + moduleName + \", line \" + lineNumber + \")\", moduleName, lineNumber);\n        state = 1;\n        val = init();\n        state = 2;\n        return val;\n    };\n};\nvar monadEffect = {\n    Applicative0: function () {\n        return applicativeEffect;\n    },\n    Bind1: function () {\n        return bindEffect;\n    }\n};\nvar bindEffect = {\n    bind: $foreign.bindE,\n    Apply0: function () {\n        return $lazy_applyEffect(0);\n    }\n};\nvar applicativeEffect = {\n    pure: $foreign.pureE,\n    Apply0: function () {\n        return $lazy_applyEffect(0);\n    }\n};\nvar $lazy_functorEffect = /* #__PURE__ */ $runtime_lazy(\"functorEffect\", \"Effect\", function () {\n    return {\n        map: Control_Applicative.liftA1(applicativeEffect)\n    };\n});\nvar $lazy_applyEffect = /* #__PURE__ */ $runtime_lazy(\"applyEffect\", \"Effect\", function () {\n    return {\n        apply: Control_Monad.ap(monadEffect),\n        Functor0: function () {\n            return $lazy_functorEffect(0);\n        }\n    };\n});\nvar functorEffect = /* #__PURE__ */ $lazy_functorEffect(20);\nvar applyEffect = /* #__PURE__ */ $lazy_applyEffect(23);\nvar lift2 = /* #__PURE__ */ Control_Apply.lift2(applyEffect);\nvar semigroupEffect = function (dictSemigroup) {\n    return {\n        append: lift2(Data_Semigroup.append(dictSemigroup))\n    };\n};\nvar monoidEffect = function (dictMonoid) {\n    var semigroupEffect1 = semigroupEffect(dictMonoid.Semigroup0());\n    return {\n        mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),\n        Semigroup0: function () {\n            return semigroupEffect1;\n        }\n    };\n};\nexport {\n    untilE,\n    whileE,\n    forE,\n    foreachE\n} from \"./foreign.js\";\nexport {\n    functorEffect,\n    applyEffect,\n    applicativeEffect,\n    bindEffect,\n    monadEffect,\n    semigroupEffect,\n    monoidEffect\n};\n", "export const _new = function (val) {\n  return function () {\n    return { value: val };\n  };\n};\n\nexport const newWithSelf = function (f) {\n  return function () {\n    var ref = { value: null };\n    ref.value = f(ref);\n    return ref;\n  };\n};\n\nexport const read = function (ref) {\n  return function () {\n    return ref.value;\n  };\n};\n\nexport const modifyImpl = function (f) {\n  return function (ref) {\n    return function () {\n      var t = f(ref.value);\n      ref.value = t.state;\n      return t.value;\n    };\n  };\n};\n\nexport const write = function (val) {\n  return function (ref) {\n    return function () {\n      ref.value = val;\n    };\n  };\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Effect from \"../Effect/index.js\";\nvar $$void = /* #__PURE__ */ Data_Functor[\"void\"](Effect.functorEffect);\nvar $$new = $foreign[\"_new\"];\nvar modify$prime = $foreign.modifyImpl;\nvar modify = function (f) {\n    return modify$prime(function (s) {\n        var s$prime = f(s);\n        return {\n            state: s$prime,\n            value: s$prime\n        };\n    });\n};\nvar modify_ = function (f) {\n    return function (s) {\n        return $$void(modify(f)(s));\n    };\n};\nexport {\n    newWithSelf,\n    read,\n    write\n} from \"./foreign.js\";\nexport {\n    $$new as new,\n    modify$prime,\n    modify,\n    modify_\n};\n", "export const foldrArray = function (f) {\n  return function (init) {\n    return function (xs) {\n      var acc = init;\n      var len = xs.length;\n      for (var i = len - 1; i >= 0; i--) {\n        acc = f(xs[i])(acc);\n      }\n      return acc;\n    };\n  };\n};\n\nexport const foldlArray = function (f) {\n  return function (init) {\n    return function (xs) {\n      var acc = init;\n      var len = xs.length;\n      for (var i = 0; i < len; i++) {\n        acc = f(acc)(xs[i]);\n      }\n      return acc;\n    };\n  };\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Control_Plus from \"../Control.Plus/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor_Coproduct from \"../Data.Functor.Coproduct/index.js\";\nimport * as Data_HeytingAlgebra from \"../Data.HeytingAlgebra/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Maybe_First from \"../Data.Maybe.First/index.js\";\nimport * as Data_Monoid from \"../Data.Monoid/index.js\";\nimport * as Data_Monoid_Conj from \"../Data.Monoid.Conj/index.js\";\nimport * as Data_Monoid_Disj from \"../Data.Monoid.Disj/index.js\";\nimport * as Data_Monoid_Dual from \"../Data.Monoid.Dual/index.js\";\nimport * as Data_Monoid_Endo from \"../Data.Monoid.Endo/index.js\";\nimport * as Data_Newtype from \"../Data.Newtype/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Semiring from \"../Data.Semiring/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar eq1 = /* #__PURE__ */ Data_Eq.eq(Data_Ordering.eqOrdering);\nvar unwrap = /* #__PURE__ */ Data_Newtype.unwrap();\nvar monoidEndo = /* #__PURE__ */ Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn);\nvar monoidDual = /* #__PURE__ */ Data_Monoid_Dual.monoidDual(monoidEndo);\nvar alaF = /* #__PURE__ */ Data_Newtype.alaF()()()();\nvar foldr = function (dict) {\n    return dict.foldr;\n};\nvar indexr = function (dictFoldable) {\n    var foldr2 = foldr(dictFoldable);\n    return function (idx) {\n        var go = function (a) {\n            return function (cursor) {\n                if (cursor.elem instanceof Data_Maybe.Just) {\n                    return cursor;\n                };\n                var $292 = cursor.pos === idx;\n                if ($292) {\n                    return {\n                        elem: new Data_Maybe.Just(a),\n                        pos: cursor.pos\n                    };\n                };\n                return {\n                    pos: cursor.pos + 1 | 0,\n                    elem: cursor.elem\n                };\n            };\n        };\n        var $451 = foldr2(go)({\n            elem: Data_Maybe.Nothing.value,\n            pos: 0\n        });\n        return function ($452) {\n            return (function (v) {\n                return v.elem;\n            })($451($452));\n        };\n    };\n};\nvar $$null = function (dictFoldable) {\n    return foldr(dictFoldable)(function (v) {\n        return function (v1) {\n            return false;\n        };\n    })(true);\n};\nvar oneOf = function (dictFoldable) {\n    var foldr2 = foldr(dictFoldable);\n    return function (dictPlus) {\n        return foldr2(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));\n    };\n};\nvar oneOfMap = function (dictFoldable) {\n    var foldr2 = foldr(dictFoldable);\n    return function (dictPlus) {\n        var alt = Control_Alt.alt(dictPlus.Alt0());\n        var empty = Control_Plus.empty(dictPlus);\n        return function (f) {\n            return foldr2(function ($453) {\n                return alt(f($453));\n            })(empty);\n        };\n    };\n};\nvar traverse_ = function (dictApplicative) {\n    var applySecond = Control_Apply.applySecond(dictApplicative.Apply0());\n    var pure = Control_Applicative.pure(dictApplicative);\n    return function (dictFoldable) {\n        var foldr2 = foldr(dictFoldable);\n        return function (f) {\n            return foldr2(function ($454) {\n                return applySecond(f($454));\n            })(pure(Data_Unit.unit));\n        };\n    };\n};\nvar for_ = function (dictApplicative) {\n    var traverse_1 = traverse_(dictApplicative);\n    return function (dictFoldable) {\n        return Data_Function.flip(traverse_1(dictFoldable));\n    };\n};\nvar sequence_ = function (dictApplicative) {\n    var traverse_1 = traverse_(dictApplicative);\n    return function (dictFoldable) {\n        return traverse_1(dictFoldable)(identity);\n    };\n};\nvar foldl = function (dict) {\n    return dict.foldl;\n};\nvar indexl = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (idx) {\n        var go = function (cursor) {\n            return function (a) {\n                if (cursor.elem instanceof Data_Maybe.Just) {\n                    return cursor;\n                };\n                var $296 = cursor.pos === idx;\n                if ($296) {\n                    return {\n                        elem: new Data_Maybe.Just(a),\n                        pos: cursor.pos\n                    };\n                };\n                return {\n                    pos: cursor.pos + 1 | 0,\n                    elem: cursor.elem\n                };\n            };\n        };\n        var $455 = foldl2(go)({\n            elem: Data_Maybe.Nothing.value,\n            pos: 0\n        });\n        return function ($456) {\n            return (function (v) {\n                return v.elem;\n            })($455($456));\n        };\n    };\n};\nvar intercalate = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (dictMonoid) {\n        var append = Data_Semigroup.append(dictMonoid.Semigroup0());\n        var mempty = Data_Monoid.mempty(dictMonoid);\n        return function (sep) {\n            return function (xs) {\n                var go = function (v) {\n                    return function (v1) {\n                        if (v.init) {\n                            return {\n                                init: false,\n                                acc: v1\n                            };\n                        };\n                        return {\n                            init: false,\n                            acc: append(v.acc)(append(sep)(v1))\n                        };\n                    };\n                };\n                return (foldl2(go)({\n                    init: true,\n                    acc: mempty\n                })(xs)).acc;\n            };\n        };\n    };\n};\nvar length = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (dictSemiring) {\n        var add1 = Data_Semiring.add(dictSemiring);\n        var one = Data_Semiring.one(dictSemiring);\n        return foldl2(function (c) {\n            return function (v) {\n                return add1(one)(c);\n            };\n        })(Data_Semiring.zero(dictSemiring));\n    };\n};\nvar maximumBy = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (cmp) {\n        var max$prime = function (v) {\n            return function (v1) {\n                if (v instanceof Data_Maybe.Nothing) {\n                    return new Data_Maybe.Just(v1);\n                };\n                if (v instanceof Data_Maybe.Just) {\n                    return new Data_Maybe.Just((function () {\n                        var $303 = eq1(cmp(v.value0)(v1))(Data_Ordering.GT.value);\n                        if ($303) {\n                            return v.value0;\n                        };\n                        return v1;\n                    })());\n                };\n                throw new Error(\"Failed pattern match at Data.Foldable (line 441, column 3 - line 441, column 27): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        };\n        return foldl2(max$prime)(Data_Maybe.Nothing.value);\n    };\n};\nvar maximum = function (dictOrd) {\n    var compare = Data_Ord.compare(dictOrd);\n    return function (dictFoldable) {\n        return maximumBy(dictFoldable)(compare);\n    };\n};\nvar minimumBy = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (cmp) {\n        var min$prime = function (v) {\n            return function (v1) {\n                if (v instanceof Data_Maybe.Nothing) {\n                    return new Data_Maybe.Just(v1);\n                };\n                if (v instanceof Data_Maybe.Just) {\n                    return new Data_Maybe.Just((function () {\n                        var $307 = eq1(cmp(v.value0)(v1))(Data_Ordering.LT.value);\n                        if ($307) {\n                            return v.value0;\n                        };\n                        return v1;\n                    })());\n                };\n                throw new Error(\"Failed pattern match at Data.Foldable (line 454, column 3 - line 454, column 27): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        };\n        return foldl2(min$prime)(Data_Maybe.Nothing.value);\n    };\n};\nvar minimum = function (dictOrd) {\n    var compare = Data_Ord.compare(dictOrd);\n    return function (dictFoldable) {\n        return minimumBy(dictFoldable)(compare);\n    };\n};\nvar product = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (dictSemiring) {\n        return foldl2(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));\n    };\n};\nvar sum = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (dictSemiring) {\n        return foldl2(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));\n    };\n};\nvar foldableTuple = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(v.value1)(z);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(z)(v.value1);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        return function (f) {\n            return function (v) {\n                return f(v.value1);\n            };\n        };\n    }\n};\nvar foldableMultiplicative = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(v)(z);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(z)(v);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        return function (f) {\n            return function (v) {\n                return f(v);\n            };\n        };\n    }\n};\nvar foldableMaybe = {\n    foldr: function (v) {\n        return function (v1) {\n            return function (v2) {\n                if (v2 instanceof Data_Maybe.Nothing) {\n                    return v1;\n                };\n                if (v2 instanceof Data_Maybe.Just) {\n                    return v(v2.value0)(v1);\n                };\n                throw new Error(\"Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n            };\n        };\n    },\n    foldl: function (v) {\n        return function (v1) {\n            return function (v2) {\n                if (v2 instanceof Data_Maybe.Nothing) {\n                    return v1;\n                };\n                if (v2 instanceof Data_Maybe.Just) {\n                    return v(v1)(v2.value0);\n                };\n                throw new Error(\"Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        var mempty = Data_Monoid.mempty(dictMonoid);\n        return function (v) {\n            return function (v1) {\n                if (v1 instanceof Data_Maybe.Nothing) {\n                    return mempty;\n                };\n                if (v1 instanceof Data_Maybe.Just) {\n                    return v(v1.value0);\n                };\n                throw new Error(\"Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        };\n    }\n};\nvar foldr1 = /* #__PURE__ */ foldr(foldableMaybe);\nvar foldl1 = /* #__PURE__ */ foldl(foldableMaybe);\nvar foldableIdentity = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(v)(z);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(z)(v);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        return function (f) {\n            return function (v) {\n                return f(v);\n            };\n        };\n    }\n};\nvar foldableEither = {\n    foldr: function (v) {\n        return function (v1) {\n            return function (v2) {\n                if (v2 instanceof Data_Either.Left) {\n                    return v1;\n                };\n                if (v2 instanceof Data_Either.Right) {\n                    return v(v2.value0)(v1);\n                };\n                throw new Error(\"Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n            };\n        };\n    },\n    foldl: function (v) {\n        return function (v1) {\n            return function (v2) {\n                if (v2 instanceof Data_Either.Left) {\n                    return v1;\n                };\n                if (v2 instanceof Data_Either.Right) {\n                    return v(v1)(v2.value0);\n                };\n                throw new Error(\"Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        var mempty = Data_Monoid.mempty(dictMonoid);\n        return function (v) {\n            return function (v1) {\n                if (v1 instanceof Data_Either.Left) {\n                    return mempty;\n                };\n                if (v1 instanceof Data_Either.Right) {\n                    return v(v1.value0);\n                };\n                throw new Error(\"Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        };\n    }\n};\nvar foldableDual = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(v)(z);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(z)(v);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        return function (f) {\n            return function (v) {\n                return f(v);\n            };\n        };\n    }\n};\nvar foldableDisj = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(v)(z);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(z)(v);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        return function (f) {\n            return function (v) {\n                return f(v);\n            };\n        };\n    }\n};\nvar foldableConst = {\n    foldr: function (v) {\n        return function (z) {\n            return function (v1) {\n                return z;\n            };\n        };\n    },\n    foldl: function (v) {\n        return function (z) {\n            return function (v1) {\n                return z;\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        var mempty = Data_Monoid.mempty(dictMonoid);\n        return function (v) {\n            return function (v1) {\n                return mempty;\n            };\n        };\n    }\n};\nvar foldableConj = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(v)(z);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(z)(v);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        return function (f) {\n            return function (v) {\n                return f(v);\n            };\n        };\n    }\n};\nvar foldableAdditive = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(v)(z);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return f(z)(v);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        return function (f) {\n            return function (v) {\n                return f(v);\n            };\n        };\n    }\n};\nvar foldMapDefaultR = function (dictFoldable) {\n    var foldr2 = foldr(dictFoldable);\n    return function (dictMonoid) {\n        var append = Data_Semigroup.append(dictMonoid.Semigroup0());\n        var mempty = Data_Monoid.mempty(dictMonoid);\n        return function (f) {\n            return foldr2(function (x) {\n                return function (acc) {\n                    return append(f(x))(acc);\n                };\n            })(mempty);\n        };\n    };\n};\nvar foldableArray = {\n    foldr: $foreign.foldrArray,\n    foldl: $foreign.foldlArray,\n    foldMap: function (dictMonoid) {\n        return foldMapDefaultR(foldableArray)(dictMonoid);\n    }\n};\nvar foldMapDefaultL = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (dictMonoid) {\n        var append = Data_Semigroup.append(dictMonoid.Semigroup0());\n        var mempty = Data_Monoid.mempty(dictMonoid);\n        return function (f) {\n            return foldl2(function (acc) {\n                return function (x) {\n                    return append(acc)(f(x));\n                };\n            })(mempty);\n        };\n    };\n};\nvar foldMap = function (dict) {\n    return dict.foldMap;\n};\nvar foldMap1 = /* #__PURE__ */ foldMap(foldableMaybe);\nvar foldableApp = function (dictFoldable) {\n    var foldr2 = foldr(dictFoldable);\n    var foldl2 = foldl(dictFoldable);\n    var foldMap2 = foldMap(dictFoldable);\n    return {\n        foldr: function (f) {\n            return function (i) {\n                return function (v) {\n                    return foldr2(f)(i)(v);\n                };\n            };\n        },\n        foldl: function (f) {\n            return function (i) {\n                return function (v) {\n                    return foldl2(f)(i)(v);\n                };\n            };\n        },\n        foldMap: function (dictMonoid) {\n            var foldMap3 = foldMap2(dictMonoid);\n            return function (f) {\n                return function (v) {\n                    return foldMap3(f)(v);\n                };\n            };\n        }\n    };\n};\nvar foldableCompose = function (dictFoldable) {\n    var foldr2 = foldr(dictFoldable);\n    var foldl2 = foldl(dictFoldable);\n    var foldMap2 = foldMap(dictFoldable);\n    return function (dictFoldable1) {\n        var foldr3 = foldr(dictFoldable1);\n        var foldl3 = foldl(dictFoldable1);\n        var foldMap3 = foldMap(dictFoldable1);\n        return {\n            foldr: function (f) {\n                return function (i) {\n                    return function (v) {\n                        return foldr2(Data_Function.flip(foldr3(f)))(i)(v);\n                    };\n                };\n            },\n            foldl: function (f) {\n                return function (i) {\n                    return function (v) {\n                        return foldl2(foldl3(f))(i)(v);\n                    };\n                };\n            },\n            foldMap: function (dictMonoid) {\n                var foldMap4 = foldMap2(dictMonoid);\n                var foldMap5 = foldMap3(dictMonoid);\n                return function (f) {\n                    return function (v) {\n                        return foldMap4(foldMap5(f))(v);\n                    };\n                };\n            }\n        };\n    };\n};\nvar foldableCoproduct = function (dictFoldable) {\n    var foldr2 = foldr(dictFoldable);\n    var foldl2 = foldl(dictFoldable);\n    var foldMap2 = foldMap(dictFoldable);\n    return function (dictFoldable1) {\n        var foldr3 = foldr(dictFoldable1);\n        var foldl3 = foldl(dictFoldable1);\n        var foldMap3 = foldMap(dictFoldable1);\n        return {\n            foldr: function (f) {\n                return function (z) {\n                    return Data_Functor_Coproduct.coproduct(foldr2(f)(z))(foldr3(f)(z));\n                };\n            },\n            foldl: function (f) {\n                return function (z) {\n                    return Data_Functor_Coproduct.coproduct(foldl2(f)(z))(foldl3(f)(z));\n                };\n            },\n            foldMap: function (dictMonoid) {\n                var foldMap4 = foldMap2(dictMonoid);\n                var foldMap5 = foldMap3(dictMonoid);\n                return function (f) {\n                    return Data_Functor_Coproduct.coproduct(foldMap4(f))(foldMap5(f));\n                };\n            }\n        };\n    };\n};\nvar foldableFirst = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return foldr1(f)(z)(v);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return foldl1(f)(z)(v);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        var foldMap2 = foldMap1(dictMonoid);\n        return function (f) {\n            return function (v) {\n                return foldMap2(f)(v);\n            };\n        };\n    }\n};\nvar foldableLast = {\n    foldr: function (f) {\n        return function (z) {\n            return function (v) {\n                return foldr1(f)(z)(v);\n            };\n        };\n    },\n    foldl: function (f) {\n        return function (z) {\n            return function (v) {\n                return foldl1(f)(z)(v);\n            };\n        };\n    },\n    foldMap: function (dictMonoid) {\n        var foldMap2 = foldMap1(dictMonoid);\n        return function (f) {\n            return function (v) {\n                return foldMap2(f)(v);\n            };\n        };\n    }\n};\nvar foldableProduct = function (dictFoldable) {\n    var foldr2 = foldr(dictFoldable);\n    var foldl2 = foldl(dictFoldable);\n    var foldMap2 = foldMap(dictFoldable);\n    return function (dictFoldable1) {\n        var foldr3 = foldr(dictFoldable1);\n        var foldl3 = foldl(dictFoldable1);\n        var foldMap3 = foldMap(dictFoldable1);\n        return {\n            foldr: function (f) {\n                return function (z) {\n                    return function (v) {\n                        return foldr2(f)(foldr3(f)(z)(v.value1))(v.value0);\n                    };\n                };\n            },\n            foldl: function (f) {\n                return function (z) {\n                    return function (v) {\n                        return foldl3(f)(foldl2(f)(z)(v.value0))(v.value1);\n                    };\n                };\n            },\n            foldMap: function (dictMonoid) {\n                var append = Data_Semigroup.append(dictMonoid.Semigroup0());\n                var foldMap4 = foldMap2(dictMonoid);\n                var foldMap5 = foldMap3(dictMonoid);\n                return function (f) {\n                    return function (v) {\n                        return append(foldMap4(f)(v.value0))(foldMap5(f)(v.value1));\n                    };\n                };\n            }\n        };\n    };\n};\nvar foldlDefault = function (dictFoldable) {\n    var foldMap2 = foldMap(dictFoldable)(monoidDual);\n    return function (c) {\n        return function (u) {\n            return function (xs) {\n                return unwrap(unwrap(foldMap2((function () {\n                    var $457 = Data_Function.flip(c);\n                    return function ($458) {\n                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($457($458)));\n                    };\n                })())(xs)))(u);\n            };\n        };\n    };\n};\nvar foldrDefault = function (dictFoldable) {\n    var foldMap2 = foldMap(dictFoldable)(monoidEndo);\n    return function (c) {\n        return function (u) {\n            return function (xs) {\n                return unwrap(foldMap2(function ($459) {\n                    return Data_Monoid_Endo.Endo(c($459));\n                })(xs))(u);\n            };\n        };\n    };\n};\nvar lookup = function (dictFoldable) {\n    var foldMap2 = foldMap(dictFoldable)(Data_Maybe_First.monoidFirst);\n    return function (dictEq) {\n        var eq2 = Data_Eq.eq(dictEq);\n        return function (a) {\n            var $460 = foldMap2(function (v) {\n                var $444 = eq2(a)(v.value0);\n                if ($444) {\n                    return new Data_Maybe.Just(v.value1);\n                };\n                return Data_Maybe.Nothing.value;\n            });\n            return function ($461) {\n                return unwrap($460($461));\n            };\n        };\n    };\n};\nvar surroundMap = function (dictFoldable) {\n    var foldMap2 = foldMap(dictFoldable)(monoidEndo);\n    return function (dictSemigroup) {\n        var append = Data_Semigroup.append(dictSemigroup);\n        return function (d) {\n            return function (t) {\n                return function (f) {\n                    var joined = function (a) {\n                        return function (m) {\n                            return append(d)(append(t(a))(m));\n                        };\n                    };\n                    return unwrap(foldMap2(joined)(f))(d);\n                };\n            };\n        };\n    };\n};\nvar surround = function (dictFoldable) {\n    var surroundMap1 = surroundMap(dictFoldable);\n    return function (dictSemigroup) {\n        var surroundMap2 = surroundMap1(dictSemigroup);\n        return function (d) {\n            return surroundMap2(d)(identity);\n        };\n    };\n};\nvar foldM = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (dictMonad) {\n        var bind = Control_Bind.bind(dictMonad.Bind1());\n        var pure = Control_Applicative.pure(dictMonad.Applicative0());\n        return function (f) {\n            return function (b0) {\n                return foldl2(function (b) {\n                    return function (a) {\n                        return bind(b)(Data_Function.flip(f)(a));\n                    };\n                })(pure(b0));\n            };\n        };\n    };\n};\nvar fold = function (dictFoldable) {\n    var foldMap2 = foldMap(dictFoldable);\n    return function (dictMonoid) {\n        return foldMap2(dictMonoid)(identity);\n    };\n};\nvar findMap = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (p) {\n        var go = function (v) {\n            return function (v1) {\n                if (v instanceof Data_Maybe.Nothing) {\n                    return p(v1);\n                };\n                return v;\n            };\n        };\n        return foldl2(go)(Data_Maybe.Nothing.value);\n    };\n};\nvar find = function (dictFoldable) {\n    var foldl2 = foldl(dictFoldable);\n    return function (p) {\n        var go = function (v) {\n            return function (v1) {\n                if (v instanceof Data_Maybe.Nothing && p(v1)) {\n                    return new Data_Maybe.Just(v1);\n                };\n                return v;\n            };\n        };\n        return foldl2(go)(Data_Maybe.Nothing.value);\n    };\n};\nvar any = function (dictFoldable) {\n    var foldMap2 = foldMap(dictFoldable);\n    return function (dictHeytingAlgebra) {\n        return alaF(Data_Monoid_Disj.Disj)(foldMap2(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));\n    };\n};\nvar elem = function (dictFoldable) {\n    var any1 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);\n    return function (dictEq) {\n        var $462 = Data_Eq.eq(dictEq);\n        return function ($463) {\n            return any1($462($463));\n        };\n    };\n};\nvar notElem = function (dictFoldable) {\n    var elem1 = elem(dictFoldable);\n    return function (dictEq) {\n        var elem2 = elem1(dictEq);\n        return function (x) {\n            var $464 = elem2(x);\n            return function ($465) {\n                return !$464($465);\n            };\n        };\n    };\n};\nvar or = function (dictFoldable) {\n    var any1 = any(dictFoldable);\n    return function (dictHeytingAlgebra) {\n        return any1(dictHeytingAlgebra)(identity);\n    };\n};\nvar all = function (dictFoldable) {\n    var foldMap2 = foldMap(dictFoldable);\n    return function (dictHeytingAlgebra) {\n        return alaF(Data_Monoid_Conj.Conj)(foldMap2(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));\n    };\n};\nvar and = function (dictFoldable) {\n    var all1 = all(dictFoldable);\n    return function (dictHeytingAlgebra) {\n        return all1(dictHeytingAlgebra)(identity);\n    };\n};\nexport {\n    foldr,\n    foldl,\n    foldMap,\n    foldrDefault,\n    foldlDefault,\n    foldMapDefaultL,\n    foldMapDefaultR,\n    fold,\n    foldM,\n    traverse_,\n    for_,\n    sequence_,\n    oneOf,\n    oneOfMap,\n    intercalate,\n    surroundMap,\n    surround,\n    and,\n    or,\n    all,\n    any,\n    sum,\n    product,\n    elem,\n    notElem,\n    indexl,\n    indexr,\n    find,\n    findMap,\n    maximum,\n    maximumBy,\n    minimum,\n    minimumBy,\n    $$null as null,\n    length,\n    lookup,\n    foldableArray,\n    foldableMaybe,\n    foldableFirst,\n    foldableLast,\n    foldableAdditive,\n    foldableDual,\n    foldableDisj,\n    foldableConj,\n    foldableMultiplicative,\n    foldableEither,\n    foldableTuple,\n    foldableIdentity,\n    foldableConst,\n    foldableProduct,\n    foldableCoproduct,\n    foldableCompose,\n    foldableApp\n};\n", "// module Data.Function.Uncurried\n\nexport const mkFn0 = function (fn) {\n  return function () {\n    return fn();\n  };\n};\n\nexport const mkFn2 = function (fn) {\n  /* jshint maxparams: 2 */\n  return function (a, b) {\n    return fn(a)(b);\n  };\n};\n\nexport const mkFn3 = function (fn) {\n  /* jshint maxparams: 3 */\n  return function (a, b, c) {\n    return fn(a)(b)(c);\n  };\n};\n\nexport const mkFn4 = function (fn) {\n  /* jshint maxparams: 4 */\n  return function (a, b, c, d) {\n    return fn(a)(b)(c)(d);\n  };\n};\n\nexport const mkFn5 = function (fn) {\n  /* jshint maxparams: 5 */\n  return function (a, b, c, d, e) {\n    return fn(a)(b)(c)(d)(e);\n  };\n};\n\nexport const mkFn6 = function (fn) {\n  /* jshint maxparams: 6 */\n  return function (a, b, c, d, e, f) {\n    return fn(a)(b)(c)(d)(e)(f);\n  };\n};\n\nexport const mkFn7 = function (fn) {\n  /* jshint maxparams: 7 */\n  return function (a, b, c, d, e, f, g) {\n    return fn(a)(b)(c)(d)(e)(f)(g);\n  };\n};\n\nexport const mkFn8 = function (fn) {\n  /* jshint maxparams: 8 */\n  return function (a, b, c, d, e, f, g, h) {\n    return fn(a)(b)(c)(d)(e)(f)(g)(h);\n  };\n};\n\nexport const mkFn9 = function (fn) {\n  /* jshint maxparams: 9 */\n  return function (a, b, c, d, e, f, g, h, i) {\n    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);\n  };\n};\n\nexport const mkFn10 = function (fn) {\n  /* jshint maxparams: 10 */\n  return function (a, b, c, d, e, f, g, h, i, j) {\n    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);\n  };\n};\n\nexport const runFn0 = function (fn) {\n  return fn();\n};\n\nexport const runFn2 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return fn(a, b);\n    };\n  };\n};\n\nexport const runFn3 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return fn(a, b, c);\n      };\n    };\n  };\n};\n\nexport const runFn4 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return fn(a, b, c, d);\n        };\n      };\n    };\n  };\n};\n\nexport const runFn5 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return fn(a, b, c, d, e);\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn6 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return fn(a, b, c, d, e, f);\n            };\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn7 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return function (g) {\n                return fn(a, b, c, d, e, f, g);\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn8 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return function (g) {\n                return function (h) {\n                  return fn(a, b, c, d, e, f, g, h);\n                };\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn9 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return function (g) {\n                return function (h) {\n                  return function (i) {\n                    return fn(a, b, c, d, e, f, g, h, i);\n                  };\n                };\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn10 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return function (g) {\n                return function (h) {\n                  return function (i) {\n                    return function (j) {\n                      return fn(a, b, c, d, e, f, g, h, i, j);\n                    };\n                  };\n                };\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n};\n", "// jshint maxparams: 3\n\nexport const traverseArrayImpl = (function () {\n  function array1(a) {\n    return [a];\n  }\n\n  function array2(a) {\n    return function (b) {\n      return [a, b];\n    };\n  }\n\n  function array3(a) {\n    return function (b) {\n      return function (c) {\n        return [a, b, c];\n      };\n    };\n  }\n\n  function concat2(xs) {\n    return function (ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  return function (apply) {\n    return function (map) {\n      return function (pure) {\n        return function (f) {\n          return function (array) {\n            function go(bot, top) {\n              switch (top - bot) {\n              case 0: return pure([]);\n              case 1: return map(array1)(f(array[bot]));\n              case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));\n              case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));\n              default:\n                // This slightly tricky pivot selection aims to produce two\n                // even-length partitions where possible.\n                var pivot = bot + Math.floor((top - bot) / 4) * 2;\n                return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));\n              }\n            }\n            return go(0, array.length);\n          };\n        };\n      };\n    };\n  };\n})();\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Const from \"../Data.Const/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Foldable from \"../Data.Foldable/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Functor_App from \"../Data.Functor.App/index.js\";\nimport * as Data_Functor_Compose from \"../Data.Functor.Compose/index.js\";\nimport * as Data_Functor_Coproduct from \"../Data.Functor.Coproduct/index.js\";\nimport * as Data_Functor_Product from \"../Data.Functor.Product/index.js\";\nimport * as Data_Identity from \"../Data.Identity/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Maybe_First from \"../Data.Maybe.First/index.js\";\nimport * as Data_Maybe_Last from \"../Data.Maybe.Last/index.js\";\nimport * as Data_Monoid_Additive from \"../Data.Monoid.Additive/index.js\";\nimport * as Data_Monoid_Conj from \"../Data.Monoid.Conj/index.js\";\nimport * as Data_Monoid_Disj from \"../Data.Monoid.Disj/index.js\";\nimport * as Data_Monoid_Dual from \"../Data.Monoid.Dual/index.js\";\nimport * as Data_Monoid_Multiplicative from \"../Data.Monoid.Multiplicative/index.js\";\nimport * as Data_Traversable_Accum from \"../Data.Traversable.Accum/index.js\";\nimport * as Data_Traversable_Accum_Internal from \"../Data.Traversable.Accum.Internal/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar traverse = function (dict) {\n    return dict.traverse;\n};\nvar traversableTuple = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (f) {\n            return function (v) {\n                return map(Data_Tuple.Tuple.create(v.value0))(f(v.value1));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return map(Data_Tuple.Tuple.create(v.value0))(v.value1);\n        };\n    },\n    Functor0: function () {\n        return Data_Tuple.functorTuple;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableTuple;\n    }\n};\nvar traversableMultiplicative = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (f) {\n            return function (v) {\n                return map(Data_Monoid_Multiplicative.Multiplicative)(f(v));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return map(Data_Monoid_Multiplicative.Multiplicative)(v);\n        };\n    },\n    Functor0: function () {\n        return Data_Monoid_Multiplicative.functorMultiplicative;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableMultiplicative;\n    }\n};\nvar traversableMaybe = {\n    traverse: function (dictApplicative) {\n        var pure = Control_Applicative.pure(dictApplicative);\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return function (v1) {\n                if (v1 instanceof Data_Maybe.Nothing) {\n                    return pure(Data_Maybe.Nothing.value);\n                };\n                if (v1 instanceof Data_Maybe.Just) {\n                    return map(Data_Maybe.Just.create)(v(v1.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var pure = Control_Applicative.pure(dictApplicative);\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            if (v instanceof Data_Maybe.Nothing) {\n                return pure(Data_Maybe.Nothing.value);\n            };\n            if (v instanceof Data_Maybe.Just) {\n                return map(Data_Maybe.Just.create)(v.value0);\n            };\n            throw new Error(\"Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): \" + [ v.constructor.name ]);\n        };\n    },\n    Functor0: function () {\n        return Data_Maybe.functorMaybe;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableMaybe;\n    }\n};\nvar traverse1 = /* #__PURE__ */ traverse(traversableMaybe);\nvar traversableIdentity = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (f) {\n            return function (v) {\n                return map(Data_Identity.Identity)(f(v));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return map(Data_Identity.Identity)(v);\n        };\n    },\n    Functor0: function () {\n        return Data_Identity.functorIdentity;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableIdentity;\n    }\n};\nvar traversableEither = {\n    traverse: function (dictApplicative) {\n        var pure = Control_Applicative.pure(dictApplicative);\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return function (v1) {\n                if (v1 instanceof Data_Either.Left) {\n                    return pure(new Data_Either.Left(v1.value0));\n                };\n                if (v1 instanceof Data_Either.Right) {\n                    return map(Data_Either.Right.create)(v(v1.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var pure = Control_Applicative.pure(dictApplicative);\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            if (v instanceof Data_Either.Left) {\n                return pure(new Data_Either.Left(v.value0));\n            };\n            if (v instanceof Data_Either.Right) {\n                return map(Data_Either.Right.create)(v.value0);\n            };\n            throw new Error(\"Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36): \" + [ v.constructor.name ]);\n        };\n    },\n    Functor0: function () {\n        return Data_Either.functorEither;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableEither;\n    }\n};\nvar traversableDual = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (f) {\n            return function (v) {\n                return map(Data_Monoid_Dual.Dual)(f(v));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return map(Data_Monoid_Dual.Dual)(v);\n        };\n    },\n    Functor0: function () {\n        return Data_Monoid_Dual.functorDual;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableDual;\n    }\n};\nvar traversableDisj = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (f) {\n            return function (v) {\n                return map(Data_Monoid_Disj.Disj)(f(v));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return map(Data_Monoid_Disj.Disj)(v);\n        };\n    },\n    Functor0: function () {\n        return Data_Monoid_Disj.functorDisj;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableDisj;\n    }\n};\nvar traversableConst = {\n    traverse: function (dictApplicative) {\n        var pure = Control_Applicative.pure(dictApplicative);\n        return function (v) {\n            return function (v1) {\n                return pure(v1);\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var pure = Control_Applicative.pure(dictApplicative);\n        return function (v) {\n            return pure(v);\n        };\n    },\n    Functor0: function () {\n        return Data_Const.functorConst;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableConst;\n    }\n};\nvar traversableConj = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (f) {\n            return function (v) {\n                return map(Data_Monoid_Conj.Conj)(f(v));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return map(Data_Monoid_Conj.Conj)(v);\n        };\n    },\n    Functor0: function () {\n        return Data_Monoid_Conj.functorConj;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableConj;\n    }\n};\nvar traversableCompose = function (dictTraversable) {\n    var traverse2 = traverse(dictTraversable);\n    var functorCompose = Data_Functor_Compose.functorCompose(dictTraversable.Functor0());\n    var foldableCompose = Data_Foldable.foldableCompose(dictTraversable.Foldable1());\n    return function (dictTraversable1) {\n        var traverse3 = traverse(dictTraversable1);\n        var functorCompose1 = functorCompose(dictTraversable1.Functor0());\n        var foldableCompose1 = foldableCompose(dictTraversable1.Foldable1());\n        return {\n            traverse: function (dictApplicative) {\n                var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n                var traverse4 = traverse2(dictApplicative);\n                var traverse5 = traverse3(dictApplicative);\n                return function (f) {\n                    return function (v) {\n                        return map(Data_Functor_Compose.Compose)(traverse4(traverse5(f))(v));\n                    };\n                };\n            },\n            sequence: function (dictApplicative) {\n                return traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(identity);\n            },\n            Functor0: function () {\n                return functorCompose1;\n            },\n            Foldable1: function () {\n                return foldableCompose1;\n            }\n        };\n    };\n};\nvar traversableAdditive = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (f) {\n            return function (v) {\n                return map(Data_Monoid_Additive.Additive)(f(v));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        return function (v) {\n            return map(Data_Monoid_Additive.Additive)(v);\n        };\n    },\n    Functor0: function () {\n        return Data_Monoid_Additive.functorAdditive;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableAdditive;\n    }\n};\nvar sequenceDefault = function (dictTraversable) {\n    var traverse2 = traverse(dictTraversable);\n    return function (dictApplicative) {\n        return traverse2(dictApplicative)(identity);\n    };\n};\nvar traversableArray = {\n    traverse: function (dictApplicative) {\n        var Apply0 = dictApplicative.Apply0();\n        return $foreign.traverseArrayImpl(Control_Apply.apply(Apply0))(Data_Functor.map(Apply0.Functor0()))(Control_Applicative.pure(dictApplicative));\n    },\n    sequence: function (dictApplicative) {\n        return sequenceDefault(traversableArray)(dictApplicative);\n    },\n    Functor0: function () {\n        return Data_Functor.functorArray;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableArray;\n    }\n};\nvar sequence = function (dict) {\n    return dict.sequence;\n};\nvar sequence1 = /* #__PURE__ */ sequence(traversableMaybe);\nvar traversableApp = function (dictTraversable) {\n    var traverse2 = traverse(dictTraversable);\n    var sequence2 = sequence(dictTraversable);\n    var functorApp = Data_Functor_App.functorApp(dictTraversable.Functor0());\n    var foldableApp = Data_Foldable.foldableApp(dictTraversable.Foldable1());\n    return {\n        traverse: function (dictApplicative) {\n            var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n            var traverse3 = traverse2(dictApplicative);\n            return function (f) {\n                return function (v) {\n                    return map(Data_Functor_App.App)(traverse3(f)(v));\n                };\n            };\n        },\n        sequence: function (dictApplicative) {\n            var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n            var sequence3 = sequence2(dictApplicative);\n            return function (v) {\n                return map(Data_Functor_App.App)(sequence3(v));\n            };\n        },\n        Functor0: function () {\n            return functorApp;\n        },\n        Foldable1: function () {\n            return foldableApp;\n        }\n    };\n};\nvar traversableCoproduct = function (dictTraversable) {\n    var traverse2 = traverse(dictTraversable);\n    var sequence2 = sequence(dictTraversable);\n    var functorCoproduct = Data_Functor_Coproduct.functorCoproduct(dictTraversable.Functor0());\n    var foldableCoproduct = Data_Foldable.foldableCoproduct(dictTraversable.Foldable1());\n    return function (dictTraversable1) {\n        var traverse3 = traverse(dictTraversable1);\n        var sequence3 = sequence(dictTraversable1);\n        var functorCoproduct1 = functorCoproduct(dictTraversable1.Functor0());\n        var foldableCoproduct1 = foldableCoproduct(dictTraversable1.Foldable1());\n        return {\n            traverse: function (dictApplicative) {\n                var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n                var traverse4 = traverse2(dictApplicative);\n                var traverse5 = traverse3(dictApplicative);\n                return function (f) {\n                    return Data_Functor_Coproduct.coproduct((function () {\n                        var $313 = map(function ($316) {\n                            return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($316));\n                        });\n                        var $314 = traverse4(f);\n                        return function ($315) {\n                            return $313($314($315));\n                        };\n                    })())((function () {\n                        var $317 = map(function ($320) {\n                            return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($320));\n                        });\n                        var $318 = traverse5(f);\n                        return function ($319) {\n                            return $317($318($319));\n                        };\n                    })());\n                };\n            },\n            sequence: function (dictApplicative) {\n                var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n                return Data_Functor_Coproduct.coproduct((function () {\n                    var $321 = map(function ($324) {\n                        return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($324));\n                    });\n                    var $322 = sequence2(dictApplicative);\n                    return function ($323) {\n                        return $321($322($323));\n                    };\n                })())((function () {\n                    var $325 = map(function ($328) {\n                        return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($328));\n                    });\n                    var $326 = sequence3(dictApplicative);\n                    return function ($327) {\n                        return $325($326($327));\n                    };\n                })());\n            },\n            Functor0: function () {\n                return functorCoproduct1;\n            },\n            Foldable1: function () {\n                return foldableCoproduct1;\n            }\n        };\n    };\n};\nvar traversableFirst = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        var traverse2 = traverse1(dictApplicative);\n        return function (f) {\n            return function (v) {\n                return map(Data_Maybe_First.First)(traverse2(f)(v));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        var sequence2 = sequence1(dictApplicative);\n        return function (v) {\n            return map(Data_Maybe_First.First)(sequence2(v));\n        };\n    },\n    Functor0: function () {\n        return Data_Maybe_First.functorFirst;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableFirst;\n    }\n};\nvar traversableLast = {\n    traverse: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        var traverse2 = traverse1(dictApplicative);\n        return function (f) {\n            return function (v) {\n                return map(Data_Maybe_Last.Last)(traverse2(f)(v));\n            };\n        };\n    },\n    sequence: function (dictApplicative) {\n        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n        var sequence2 = sequence1(dictApplicative);\n        return function (v) {\n            return map(Data_Maybe_Last.Last)(sequence2(v));\n        };\n    },\n    Functor0: function () {\n        return Data_Maybe_Last.functorLast;\n    },\n    Foldable1: function () {\n        return Data_Foldable.foldableLast;\n    }\n};\nvar traversableProduct = function (dictTraversable) {\n    var traverse2 = traverse(dictTraversable);\n    var sequence2 = sequence(dictTraversable);\n    var functorProduct = Data_Functor_Product.functorProduct(dictTraversable.Functor0());\n    var foldableProduct = Data_Foldable.foldableProduct(dictTraversable.Foldable1());\n    return function (dictTraversable1) {\n        var traverse3 = traverse(dictTraversable1);\n        var sequence3 = sequence(dictTraversable1);\n        var functorProduct1 = functorProduct(dictTraversable1.Functor0());\n        var foldableProduct1 = foldableProduct(dictTraversable1.Foldable1());\n        return {\n            traverse: function (dictApplicative) {\n                var lift2 = Control_Apply.lift2(dictApplicative.Apply0());\n                var traverse4 = traverse2(dictApplicative);\n                var traverse5 = traverse3(dictApplicative);\n                return function (f) {\n                    return function (v) {\n                        return lift2(Data_Functor_Product.product)(traverse4(f)(v.value0))(traverse5(f)(v.value1));\n                    };\n                };\n            },\n            sequence: function (dictApplicative) {\n                var lift2 = Control_Apply.lift2(dictApplicative.Apply0());\n                var sequence4 = sequence2(dictApplicative);\n                var sequence5 = sequence3(dictApplicative);\n                return function (v) {\n                    return lift2(Data_Functor_Product.product)(sequence4(v.value0))(sequence5(v.value1));\n                };\n            },\n            Functor0: function () {\n                return functorProduct1;\n            },\n            Foldable1: function () {\n                return foldableProduct1;\n            }\n        };\n    };\n};\nvar traverseDefault = function (dictTraversable) {\n    var sequence2 = sequence(dictTraversable);\n    var map = Data_Functor.map(dictTraversable.Functor0());\n    return function (dictApplicative) {\n        var sequence3 = sequence2(dictApplicative);\n        return function (f) {\n            return function (ta) {\n                return sequence3(map(f)(ta));\n            };\n        };\n    };\n};\nvar mapAccumR = function (dictTraversable) {\n    var traverse2 = traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR);\n    return function (f) {\n        return function (s0) {\n            return function (xs) {\n                return Data_Traversable_Accum_Internal.stateR(traverse2(function (a) {\n                    return function (s) {\n                        return f(s)(a);\n                    };\n                })(xs))(s0);\n            };\n        };\n    };\n};\nvar scanr = function (dictTraversable) {\n    var mapAccumR1 = mapAccumR(dictTraversable);\n    return function (f) {\n        return function (b0) {\n            return function (xs) {\n                return (mapAccumR1(function (b) {\n                    return function (a) {\n                        var b$prime = f(a)(b);\n                        return {\n                            accum: b$prime,\n                            value: b$prime\n                        };\n                    };\n                })(b0)(xs)).value;\n            };\n        };\n    };\n};\nvar mapAccumL = function (dictTraversable) {\n    var traverse2 = traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL);\n    return function (f) {\n        return function (s0) {\n            return function (xs) {\n                return Data_Traversable_Accum_Internal.stateL(traverse2(function (a) {\n                    return function (s) {\n                        return f(s)(a);\n                    };\n                })(xs))(s0);\n            };\n        };\n    };\n};\nvar scanl = function (dictTraversable) {\n    var mapAccumL1 = mapAccumL(dictTraversable);\n    return function (f) {\n        return function (b0) {\n            return function (xs) {\n                return (mapAccumL1(function (b) {\n                    return function (a) {\n                        var b$prime = f(b)(a);\n                        return {\n                            accum: b$prime,\n                            value: b$prime\n                        };\n                    };\n                })(b0)(xs)).value;\n            };\n        };\n    };\n};\nvar $$for = function (dictApplicative) {\n    return function (dictTraversable) {\n        var traverse2 = traverse(dictTraversable)(dictApplicative);\n        return function (x) {\n            return function (f) {\n                return traverse2(f)(x);\n            };\n        };\n    };\n};\nexport {\n    traverse,\n    sequence,\n    traverseDefault,\n    sequenceDefault,\n    $$for as for,\n    scanl,\n    scanr,\n    mapAccumL,\n    mapAccumR,\n    traversableArray,\n    traversableMaybe,\n    traversableFirst,\n    traversableLast,\n    traversableAdditive,\n    traversableDual,\n    traversableConj,\n    traversableDisj,\n    traversableMultiplicative,\n    traversableEither,\n    traversableTuple,\n    traversableIdentity,\n    traversableConst,\n    traversableProduct,\n    traversableCoproduct,\n    traversableCompose,\n    traversableApp\n};\nexport {\n    all,\n    and,\n    any,\n    elem,\n    find,\n    fold,\n    foldMap,\n    foldMapDefaultL,\n    foldMapDefaultR,\n    foldl,\n    foldlDefault,\n    foldr,\n    foldrDefault,\n    for_,\n    intercalate,\n    maximum,\n    maximumBy,\n    minimum,\n    minimumBy,\n    notElem,\n    oneOf,\n    or,\n    sequence_,\n    sum,\n    traverse_\n} from \"../Data.Foldable/index.js\";\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Control_Lazy from \"../Control.Lazy/index.js\";\nimport * as Control_Monad_Rec_Class from \"../Control.Monad.Rec.Class/index.js\";\nimport * as Control_Monad_ST_Internal from \"../Control.Monad.ST.Internal/index.js\";\nimport * as Data_Array_ST from \"../Data.Array.ST/index.js\";\nimport * as Data_Array_ST_Iterator from \"../Data.Array.ST.Iterator/index.js\";\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Foldable from \"../Data.Foldable/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Function_Uncurried from \"../Data.Function.Uncurried/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_FunctorWithIndex from \"../Data.FunctorWithIndex/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Traversable from \"../Data.Traversable/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nimport * as Data_Unfoldable from \"../Data.Unfoldable/index.js\";\nvar sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray);\nvar traverse_ = /* #__PURE__ */ Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST);\nvar $$void = /* #__PURE__ */ Data_Functor[\"void\"](Control_Monad_ST_Internal.functorST);\nvar intercalate1 = /* #__PURE__ */ Data_Foldable.intercalate(Data_Foldable.foldableArray);\nvar apply = /* #__PURE__ */ Control_Apply.apply(Data_Maybe.applyMaybe);\nvar map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);\nvar map1 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);\nvar map2 = /* #__PURE__ */ Data_Functor.map(Control_Monad_ST_Internal.functorST);\nvar fromJust = /* #__PURE__ */ Data_Maybe.fromJust();\nvar when = /* #__PURE__ */ Control_Applicative.when(Control_Monad_ST_Internal.applicativeST);\nvar notEq = /* #__PURE__ */ Data_Eq.notEq(Data_Ordering.eqOrdering);\nvar eq1 = /* #__PURE__ */ Data_Eq.eq(Data_Ordering.eqOrdering);\nvar foldMap1 = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableArray);\nvar fold1 = /* #__PURE__ */ Data_Foldable.fold(Data_Foldable.foldableArray);\nvar append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);\nvar traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray);\nvar zipWith = /* #__PURE__ */ Data_Function_Uncurried.runFn3($foreign.zipWithImpl);\nvar zipWithA = function (dictApplicative) {\n    var sequence1 = sequence(dictApplicative);\n    return function (f) {\n        return function (xs) {\n            return function (ys) {\n                return sequence1(zipWith(f)(xs)(ys));\n            };\n        };\n    };\n};\nvar zip = /* #__PURE__ */ (function () {\n    return zipWith(Data_Tuple.Tuple.create);\n})();\nvar updateAtIndices = function (dictFoldable) {\n    var traverse_1 = traverse_(dictFoldable);\n    return function (us) {\n        return function (xs) {\n            return Data_Array_ST.withArray(function (res) {\n                return traverse_1(function (v) {\n                    return Data_Array_ST.poke(v.value0)(v.value1)(res);\n                })(us);\n            })(xs)();\n        };\n    };\n};\nvar updateAt = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn5($foreign[\"_updateAt\"])(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar unsafeIndex = function () {\n    return Data_Function_Uncurried.runFn2($foreign.unsafeIndexImpl);\n};\nvar unsafeIndex1 = /* #__PURE__ */ unsafeIndex();\nvar uncons = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn3($foreign.unconsImpl)(Data_Function[\"const\"](Data_Maybe.Nothing.value))(function (x) {\n        return function (xs) {\n            return new Data_Maybe.Just({\n                head: x,\n                tail: xs\n            });\n        };\n    });\n})();\nvar toUnfoldable = function (dictUnfoldable) {\n    var unfoldr = Data_Unfoldable.unfoldr(dictUnfoldable);\n    return function (xs) {\n        var len = $foreign.length(xs);\n        var f = function (i) {\n            if (i < len) {\n                return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex1(xs)(i), i + 1 | 0));\n            };\n            if (Data_Boolean.otherwise) {\n                return Data_Maybe.Nothing.value;\n            };\n            throw new Error(\"Failed pattern match at Data.Array (line 163, column 3 - line 165, column 26): \" + [ i.constructor.name ]);\n        };\n        return unfoldr(f)(0);\n    };\n};\nvar tail = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn3($foreign.unconsImpl)(Data_Function[\"const\"](Data_Maybe.Nothing.value))(function (v) {\n        return function (xs) {\n            return new Data_Maybe.Just(xs);\n        };\n    });\n})();\nvar sortBy = function (comp) {\n    return Data_Function_Uncurried.runFn3($foreign.sortByImpl)(comp)(function (v) {\n        if (v instanceof Data_Ordering.GT) {\n            return 1;\n        };\n        if (v instanceof Data_Ordering.EQ) {\n            return 0;\n        };\n        if (v instanceof Data_Ordering.LT) {\n            return -1 | 0;\n        };\n        throw new Error(\"Failed pattern match at Data.Array (line 897, column 38 - line 900, column 11): \" + [ v.constructor.name ]);\n    });\n};\nvar sortWith = function (dictOrd) {\n    var comparing = Data_Ord.comparing(dictOrd);\n    return function (f) {\n        return sortBy(comparing(f));\n    };\n};\nvar sortWith1 = /* #__PURE__ */ sortWith(Data_Ord.ordInt);\nvar sort = function (dictOrd) {\n    var compare = Data_Ord.compare(dictOrd);\n    return function (xs) {\n        return sortBy(compare)(xs);\n    };\n};\nvar snoc = function (xs) {\n    return function (x) {\n        return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();\n    };\n};\nvar slice = /* #__PURE__ */ Data_Function_Uncurried.runFn3($foreign.sliceImpl);\nvar splitAt = function (v) {\n    return function (v1) {\n        if (v <= 0) {\n            return {\n                before: [  ],\n                after: v1\n            };\n        };\n        return {\n            before: slice(0)(v)(v1),\n            after: slice(v)($foreign.length(v1))(v1)\n        };\n    };\n};\nvar take = function (n) {\n    return function (xs) {\n        var $152 = n < 1;\n        if ($152) {\n            return [  ];\n        };\n        return slice(0)(n)(xs);\n    };\n};\nvar singleton = function (a) {\n    return [ a ];\n};\nvar scanr = /* #__PURE__ */ Data_Function_Uncurried.runFn3($foreign.scanrImpl);\nvar scanl = /* #__PURE__ */ Data_Function_Uncurried.runFn3($foreign.scanlImpl);\nvar replicate = /* #__PURE__ */ Data_Function_Uncurried.runFn2($foreign.replicateImpl);\nvar range = /* #__PURE__ */ Data_Function_Uncurried.runFn2($foreign.rangeImpl);\nvar partition = /* #__PURE__ */ Data_Function_Uncurried.runFn2($foreign.partitionImpl);\nvar $$null = function (xs) {\n    return $foreign.length(xs) === 0;\n};\nvar modifyAtIndices = function (dictFoldable) {\n    var traverse_1 = traverse_(dictFoldable);\n    return function (is) {\n        return function (f) {\n            return function (xs) {\n                return Data_Array_ST.withArray(function (res) {\n                    return traverse_1(function (i) {\n                        return Data_Array_ST.modify(i)(f)(res);\n                    })(is);\n                })(xs)();\n            };\n        };\n    };\n};\nvar mapWithIndex = /* #__PURE__ */ Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray);\nvar intersperse = function (a) {\n    return function (arr) {\n        var v = $foreign.length(arr);\n        if (v < 2) {\n            return arr;\n        };\n        if (Data_Boolean.otherwise) {\n            return Data_Array_ST.run((function () {\n                var unsafeGetElem = function (idx) {\n                    return unsafeIndex1(arr)(idx);\n                };\n                return function __do() {\n                    var out = Data_Array_ST[\"new\"]();\n                    Data_Array_ST.push(unsafeGetElem(0))(out)();\n                    Control_Monad_ST_Internal[\"for\"](1)(v)(function (idx) {\n                        return function __do() {\n                            Data_Array_ST.push(a)(out)();\n                            return $$void(Data_Array_ST.push(unsafeGetElem(idx))(out))();\n                        };\n                    })();\n                    return out;\n                };\n            })());\n        };\n        throw new Error(\"Failed pattern match at Data.Array (line 623, column 21 - line 633, column 17): \" + [ v.constructor.name ]);\n    };\n};\nvar intercalate = function (dictMonoid) {\n    return intercalate1(dictMonoid);\n};\nvar insertAt = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn5($foreign[\"_insertAt\"])(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar init = function (xs) {\n    if ($$null(xs)) {\n        return Data_Maybe.Nothing.value;\n    };\n    if (Data_Boolean.otherwise) {\n        return new Data_Maybe.Just(slice(0)($foreign.length(xs) - 1 | 0)(xs));\n    };\n    throw new Error(\"Failed pattern match at Data.Array (line 351, column 1 - line 351, column 45): \" + [ xs.constructor.name ]);\n};\nvar index = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn4($foreign.indexImpl)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar last = function (xs) {\n    return index(xs)($foreign.length(xs) - 1 | 0);\n};\nvar unsnoc = function (xs) {\n    return apply(map(function (v) {\n        return function (v1) {\n            return {\n                init: v,\n                last: v1\n            };\n        };\n    })(init(xs)))(last(xs));\n};\nvar modifyAt = function (i) {\n    return function (f) {\n        return function (xs) {\n            var go = function (x) {\n                return updateAt(i)(f(x))(xs);\n            };\n            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));\n        };\n    };\n};\nvar span = function (p) {\n    return function (arr) {\n        var go = function ($copy_i) {\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(i) {\n                var v = index(arr)(i);\n                if (v instanceof Data_Maybe.Just) {\n                    var $156 = p(v.value0);\n                    if ($156) {\n                        $copy_i = i + 1 | 0;\n                        return;\n                    };\n                    $tco_done = true;\n                    return new Data_Maybe.Just(i);\n                };\n                if (v instanceof Data_Maybe.Nothing) {\n                    $tco_done = true;\n                    return Data_Maybe.Nothing.value;\n                };\n                throw new Error(\"Failed pattern match at Data.Array (line 1035, column 5 - line 1037, column 25): \" + [ v.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($copy_i);\n            };\n            return $tco_result;\n        };\n        var breakIndex = go(0);\n        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {\n            return {\n                init: [  ],\n                rest: arr\n            };\n        };\n        if (breakIndex instanceof Data_Maybe.Just) {\n            return {\n                init: slice(0)(breakIndex.value0)(arr),\n                rest: slice(breakIndex.value0)($foreign.length(arr))(arr)\n            };\n        };\n        if (breakIndex instanceof Data_Maybe.Nothing) {\n            return {\n                init: arr,\n                rest: [  ]\n            };\n        };\n        throw new Error(\"Failed pattern match at Data.Array (line 1022, column 3 - line 1028, column 30): \" + [ breakIndex.constructor.name ]);\n    };\n};\nvar takeWhile = function (p) {\n    return function (xs) {\n        return (span(p)(xs)).init;\n    };\n};\nvar unzip = function (xs) {\n    return (function __do() {\n        var fsts = Data_Array_ST[\"new\"]();\n        var snds = Data_Array_ST[\"new\"]();\n        var iter = Data_Array_ST_Iterator.iterator(function (v) {\n            return index(xs)(v);\n        })();\n        Data_Array_ST_Iterator.iterate(iter)(function (v) {\n            return function __do() {\n                $$void(Data_Array_ST.push(v.value0)(fsts))();\n                return $$void(Data_Array_ST.push(v.value1)(snds))();\n            };\n        })();\n        var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();\n        var snds$prime = Data_Array_ST.unsafeFreeze(snds)();\n        return new Data_Tuple.Tuple(fsts$prime, snds$prime);\n    })();\n};\nvar head = function (xs) {\n    return index(xs)(0);\n};\nvar nubBy = function (comp) {\n    return function (xs) {\n        var indexedAndSorted = sortBy(function (x) {\n            return function (y) {\n                return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));\n            };\n        })(mapWithIndex(Data_Tuple.Tuple.create)(xs));\n        var v = head(indexedAndSorted);\n        if (v instanceof Data_Maybe.Nothing) {\n            return [  ];\n        };\n        if (v instanceof Data_Maybe.Just) {\n            return map1(Data_Tuple.snd)(sortWith1(Data_Tuple.fst)((function __do() {\n                var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();\n                Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {\n                    return function __do() {\n                        var lst = map2((function () {\n                            var $183 = function ($185) {\n                                return fromJust(last($185));\n                            };\n                            return function ($184) {\n                                return Data_Tuple.snd($183($184));\n                            };\n                        })())(Data_Array_ST.unsafeFreeze(result))();\n                        return when(notEq(comp(lst)(v1.value1))(Data_Ordering.EQ.value))($$void(Data_Array_ST.push(v1)(result)))();\n                    };\n                })();\n                return Data_Array_ST.unsafeFreeze(result)();\n            })()));\n        };\n        throw new Error(\"Failed pattern match at Data.Array (line 1115, column 17 - line 1123, column 28): \" + [ v.constructor.name ]);\n    };\n};\nvar nub = function (dictOrd) {\n    return nubBy(Data_Ord.compare(dictOrd));\n};\nvar groupBy = function (op) {\n    return function (xs) {\n        return (function __do() {\n            var result = Data_Array_ST[\"new\"]();\n            var iter = Data_Array_ST_Iterator.iterator(function (v) {\n                return index(xs)(v);\n            })();\n            Data_Array_ST_Iterator.iterate(iter)(function (x) {\n                return $$void(function __do() {\n                    var sub1 = Data_Array_ST[\"new\"]();\n                    Data_Array_ST.push(x)(sub1)();\n                    Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub1)();\n                    var grp = Data_Array_ST.unsafeFreeze(sub1)();\n                    return Data_Array_ST.push(grp)(result)();\n                });\n            })();\n            return Data_Array_ST.unsafeFreeze(result)();\n        })();\n    };\n};\nvar groupAllBy = function (cmp) {\n    var $186 = groupBy(function (x) {\n        return function (y) {\n            return eq1(cmp(x)(y))(Data_Ordering.EQ.value);\n        };\n    });\n    var $187 = sortBy(cmp);\n    return function ($188) {\n        return $186($187($188));\n    };\n};\nvar groupAll = function (dictOrd) {\n    return groupAllBy(Data_Ord.compare(dictOrd));\n};\nvar group = function (dictEq) {\n    var eq2 = Data_Eq.eq(dictEq);\n    return function (xs) {\n        return groupBy(eq2)(xs);\n    };\n};\nvar fromFoldable = function (dictFoldable) {\n    return Data_Function_Uncurried.runFn2($foreign.fromFoldableImpl)(Data_Foldable.foldr(dictFoldable));\n};\nvar foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);\nvar foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);\nvar transpose = function (xs) {\n    var buildNext = function (idx) {\n        return Data_Function.flip(foldl)(Data_Maybe.Nothing.value)(function (acc) {\n            return function (nextArr) {\n                return Data_Maybe.maybe(acc)(function (el) {\n                    return new Data_Maybe.Just(Data_Maybe.maybe([ el ])(Data_Function.flip(snoc)(el))(acc));\n                })(index(nextArr)(idx));\n            };\n        })(xs);\n    };\n    var go = function ($copy_idx) {\n        return function ($copy_allArrays) {\n            var $tco_var_idx = $copy_idx;\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(idx, allArrays) {\n                var v = buildNext(idx);\n                if (v instanceof Data_Maybe.Nothing) {\n                    $tco_done = true;\n                    return allArrays;\n                };\n                if (v instanceof Data_Maybe.Just) {\n                    $tco_var_idx = idx + 1 | 0;\n                    $copy_allArrays = snoc(allArrays)(v.value0);\n                    return;\n                };\n                throw new Error(\"Failed pattern match at Data.Array (line 837, column 22 - line 839, column 52): \" + [ v.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($tco_var_idx, $copy_allArrays);\n            };\n            return $tco_result;\n        };\n    };\n    return go(0)([  ]);\n};\nvar foldRecM = function (dictMonadRec) {\n    var Monad0 = dictMonadRec.Monad0();\n    var pure1 = Control_Applicative.pure(Monad0.Applicative0());\n    var bind1 = Control_Bind.bind(Monad0.Bind1());\n    var tailRecM2 = Control_Monad_Rec_Class.tailRecM2(dictMonadRec);\n    return function (f) {\n        return function (b) {\n            return function (array) {\n                var go = function (res) {\n                    return function (i) {\n                        if (i >= $foreign.length(array)) {\n                            return pure1(new Control_Monad_Rec_Class.Done(res));\n                        };\n                        if (Data_Boolean.otherwise) {\n                            return bind1(f(res)(unsafeIndex1(array)(i)))(function (res$prime) {\n                                return pure1(new Control_Monad_Rec_Class.Loop({\n                                    a: res$prime,\n                                    b: i + 1 | 0\n                                }));\n                            });\n                        };\n                        throw new Error(\"Failed pattern match at Data.Array (line 1349, column 3 - line 1353, column 42): \" + [ res.constructor.name, i.constructor.name ]);\n                    };\n                };\n                return tailRecM2(go)(b)(0);\n            };\n        };\n    };\n};\nvar foldMap = function (dictMonoid) {\n    return foldMap1(dictMonoid);\n};\nvar foldM = function (dictMonad) {\n    var pure1 = Control_Applicative.pure(dictMonad.Applicative0());\n    var bind1 = Control_Bind.bind(dictMonad.Bind1());\n    return function (f) {\n        return function (b) {\n            return Data_Function_Uncurried.runFn3($foreign.unconsImpl)(function (v) {\n                return pure1(b);\n            })(function (a) {\n                return function (as) {\n                    return bind1(f(b)(a))(function (b$prime) {\n                        return foldM(dictMonad)(f)(b$prime)(as);\n                    });\n                };\n            });\n        };\n    };\n};\nvar fold = function (dictMonoid) {\n    return fold1(dictMonoid);\n};\nvar findMap = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn4($foreign.findMapImpl)(Data_Maybe.Nothing.value)(Data_Maybe.isJust);\n})();\nvar findLastIndex = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn4($foreign.findLastIndexImpl)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar insertBy = function (cmp) {\n    return function (x) {\n        return function (ys) {\n            var i = Data_Maybe.maybe(0)(function (v) {\n                return v + 1 | 0;\n            })(findLastIndex(function (y) {\n                return eq1(cmp(x)(y))(Data_Ordering.GT.value);\n            })(ys));\n            return fromJust(insertAt(i)(x)(ys));\n        };\n    };\n};\nvar insert = function (dictOrd) {\n    return insertBy(Data_Ord.compare(dictOrd));\n};\nvar findIndex = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn4($foreign.findIndexImpl)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar find = function (f) {\n    return function (xs) {\n        return map(unsafeIndex1(xs))(findIndex(f)(xs));\n    };\n};\nvar filter = /* #__PURE__ */ Data_Function_Uncurried.runFn2($foreign.filterImpl);\nvar intersectBy = function (eq2) {\n    return function (xs) {\n        return function (ys) {\n            return filter(function (x) {\n                return Data_Maybe.isJust(findIndex(eq2(x))(ys));\n            })(xs);\n        };\n    };\n};\nvar intersect = function (dictEq) {\n    return intersectBy(Data_Eq.eq(dictEq));\n};\nvar elemLastIndex = function (dictEq) {\n    var eq2 = Data_Eq.eq(dictEq);\n    return function (x) {\n        return findLastIndex(function (v) {\n            return eq2(v)(x);\n        });\n    };\n};\nvar elemIndex = function (dictEq) {\n    var eq2 = Data_Eq.eq(dictEq);\n    return function (x) {\n        return findIndex(function (v) {\n            return eq2(v)(x);\n        });\n    };\n};\nvar notElem = function (dictEq) {\n    var elemIndex1 = elemIndex(dictEq);\n    return function (a) {\n        return function (arr) {\n            return Data_Maybe.isNothing(elemIndex1(a)(arr));\n        };\n    };\n};\nvar elem = function (dictEq) {\n    var elemIndex1 = elemIndex(dictEq);\n    return function (a) {\n        return function (arr) {\n            return Data_Maybe.isJust(elemIndex1(a)(arr));\n        };\n    };\n};\nvar dropWhile = function (p) {\n    return function (xs) {\n        return (span(p)(xs)).rest;\n    };\n};\nvar dropEnd = function (n) {\n    return function (xs) {\n        return take($foreign.length(xs) - n | 0)(xs);\n    };\n};\nvar drop = function (n) {\n    return function (xs) {\n        var $173 = n < 1;\n        if ($173) {\n            return xs;\n        };\n        return slice(n)($foreign.length(xs))(xs);\n    };\n};\nvar takeEnd = function (n) {\n    return function (xs) {\n        return drop($foreign.length(xs) - n | 0)(xs);\n    };\n};\nvar deleteAt = /* #__PURE__ */ (function () {\n    return Data_Function_Uncurried.runFn4($foreign[\"_deleteAt\"])(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar deleteBy = function (v) {\n    return function (v1) {\n        return function (v2) {\n            if (v2.length === 0) {\n                return [  ];\n            };\n            return Data_Maybe.maybe(v2)(function (i) {\n                return fromJust(deleteAt(i)(v2));\n            })(findIndex(v(v1))(v2));\n        };\n    };\n};\nvar $$delete = function (dictEq) {\n    return deleteBy(Data_Eq.eq(dictEq));\n};\nvar difference = function (dictEq) {\n    return foldr($$delete(dictEq));\n};\nvar cons = function (x) {\n    return function (xs) {\n        return append([ x ])(xs);\n    };\n};\nvar some = function (dictAlternative) {\n    var apply1 = Control_Apply.apply((dictAlternative.Applicative0()).Apply0());\n    var map3 = Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0());\n    return function (dictLazy) {\n        var defer = Control_Lazy.defer(dictLazy);\n        return function (v) {\n            return apply1(map3(cons)(v))(defer(function (v1) {\n                return many(dictAlternative)(dictLazy)(v);\n            }));\n        };\n    };\n};\nvar many = function (dictAlternative) {\n    var alt = Control_Alt.alt((dictAlternative.Plus1()).Alt0());\n    var pure1 = Control_Applicative.pure(dictAlternative.Applicative0());\n    return function (dictLazy) {\n        return function (v) {\n            return alt(some(dictAlternative)(dictLazy)(v))(pure1([  ]));\n        };\n    };\n};\nvar concatMap = /* #__PURE__ */ Data_Function.flip(/* #__PURE__ */ Control_Bind.bind(Control_Bind.bindArray));\nvar mapMaybe = function (f) {\n    return concatMap((function () {\n        var $189 = Data_Maybe.maybe([  ])(singleton);\n        return function ($190) {\n            return $189(f($190));\n        };\n    })());\n};\nvar filterA = function (dictApplicative) {\n    var traverse1 = traverse(dictApplicative);\n    var map3 = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n    return function (p) {\n        var $191 = map3(mapMaybe(function (v) {\n            if (v.value1) {\n                return new Data_Maybe.Just(v.value0);\n            };\n            return Data_Maybe.Nothing.value;\n        }));\n        var $192 = traverse1(function (x) {\n            return map3(Data_Tuple.Tuple.create(x))(p(x));\n        });\n        return function ($193) {\n            return $191($192($193));\n        };\n    };\n};\nvar catMaybes = /* #__PURE__ */ mapMaybe(/* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn));\nvar any = /* #__PURE__ */ Data_Function_Uncurried.runFn2($foreign.anyImpl);\nvar nubByEq = function (eq2) {\n    return function (xs) {\n        return (function __do() {\n            var arr = Data_Array_ST[\"new\"]();\n            Control_Monad_ST_Internal.foreach(xs)(function (x) {\n                return function __do() {\n                    var e = map2((function () {\n                        var $194 = any(function (v) {\n                            return eq2(v)(x);\n                        });\n                        return function ($195) {\n                            return !$194($195);\n                        };\n                    })())(Data_Array_ST.unsafeFreeze(arr))();\n                    return when(e)($$void(Data_Array_ST.push(x)(arr)))();\n                };\n            })();\n            return Data_Array_ST.unsafeFreeze(arr)();\n        })();\n    };\n};\nvar nubEq = function (dictEq) {\n    return nubByEq(Data_Eq.eq(dictEq));\n};\nvar unionBy = function (eq2) {\n    return function (xs) {\n        return function (ys) {\n            return append(xs)(foldl(Data_Function.flip(deleteBy(eq2)))(nubByEq(eq2)(ys))(xs));\n        };\n    };\n};\nvar union = function (dictEq) {\n    return unionBy(Data_Eq.eq(dictEq));\n};\nvar alterAt = function (i) {\n    return function (f) {\n        return function (xs) {\n            var go = function (x) {\n                var v = f(x);\n                if (v instanceof Data_Maybe.Nothing) {\n                    return deleteAt(i)(xs);\n                };\n                if (v instanceof Data_Maybe.Just) {\n                    return updateAt(i)(v.value0)(xs);\n                };\n                throw new Error(\"Failed pattern match at Data.Array (line 601, column 10 - line 603, column 32): \" + [ v.constructor.name ]);\n            };\n            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));\n        };\n    };\n};\nvar all = /* #__PURE__ */ Data_Function_Uncurried.runFn2($foreign.allImpl);\nexport {\n    length,\n    reverse,\n    concat\n} from \"./foreign.js\";\nexport {\n    fromFoldable,\n    toUnfoldable,\n    singleton,\n    range,\n    replicate,\n    some,\n    many,\n    $$null as null,\n    cons,\n    snoc,\n    insert,\n    insertBy,\n    head,\n    last,\n    tail,\n    init,\n    uncons,\n    unsnoc,\n    index,\n    elem,\n    notElem,\n    elemIndex,\n    elemLastIndex,\n    find,\n    findMap,\n    findIndex,\n    findLastIndex,\n    insertAt,\n    deleteAt,\n    updateAt,\n    updateAtIndices,\n    modifyAt,\n    modifyAtIndices,\n    alterAt,\n    intersperse,\n    concatMap,\n    filter,\n    partition,\n    splitAt,\n    filterA,\n    mapMaybe,\n    catMaybes,\n    mapWithIndex,\n    foldl,\n    foldr,\n    foldMap,\n    fold,\n    intercalate,\n    transpose,\n    scanl,\n    scanr,\n    sort,\n    sortBy,\n    sortWith,\n    slice,\n    take,\n    takeEnd,\n    takeWhile,\n    drop,\n    dropEnd,\n    dropWhile,\n    span,\n    group,\n    groupAll,\n    groupBy,\n    groupAllBy,\n    nub,\n    nubEq,\n    nubBy,\n    nubByEq,\n    union,\n    unionBy,\n    $$delete as delete,\n    deleteBy,\n    difference,\n    intersect,\n    intersectBy,\n    zipWith,\n    zipWithA,\n    zip,\n    unzip,\n    any,\n    all,\n    foldM,\n    foldRecM,\n    unsafeIndex\n};\n", "// Generated by purs version 0.15.15\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Effect from \"../Effect/index.js\";\nvar monadEffectEffect = {\n    liftEffect: /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn),\n    Monad0: function () {\n        return Effect.monadEffect;\n    }\n};\nvar liftEffect = function (dict) {\n    return dict.liftEffect;\n};\nexport {\n    liftEffect,\n    monadEffectEffect\n};\n", "export const log = function (s) {\n  return function () {\n    console.log(s);\n  };\n};\n\nexport const warn = function (s) {\n  return function () {\n    console.warn(s);\n  };\n};\n\nexport const error = function (s) {\n  return function () {\n    console.error(s);\n  };\n};\n\nexport const info = function (s) {\n  return function () {\n    console.info(s);\n  };\n};\n\nexport const debug = function (s) {\n  return function () {\n    console.debug(s);\n  };\n};\n\nexport const time = function (s) {\n  return function () {\n    console.time(s);\n  };\n};\n\nexport const timeLog = function (s) {\n  return function () {\n    console.timeLog(s);\n  };\n};\n\nexport const timeEnd = function (s) {\n  return function () {\n    console.timeEnd(s);\n  };\n};\n\nexport const clear = function () {\n  console.clear();\n};\n\nexport const group = function (s) {\n  return function () {\n    console.group(s);\n  };\n};\n\nexport const groupCollapsed = function (s) {\n  return function () {\n    console.groupCollapsed(s);\n  };\n};\n\nexport const groupEnd = function () {\n  console.groupEnd();\n};\n", "// Generated by purs version 0.15.15\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Effect_Class from \"../Effect.Class/index.js\";\nimport * as Effect_Console from \"../Effect.Console/index.js\";\nvar discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);\nvar warnShow = function (dictMonadEffect) {\n    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);\n    return function (dictShow) {\n        var $55 = Effect_Console.warnShow(dictShow);\n        return function ($56) {\n            return liftEffect($55($56));\n        };\n    };\n};\nvar warn = function (dictMonadEffect) {\n    var $57 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($58) {\n        return $57(Effect_Console.warn($58));\n    };\n};\nvar timeLog = function (dictMonadEffect) {\n    var $59 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($60) {\n        return $59(Effect_Console.timeLog($60));\n    };\n};\nvar timeEnd = function (dictMonadEffect) {\n    var $61 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($62) {\n        return $61(Effect_Console.timeEnd($62));\n    };\n};\nvar time = function (dictMonadEffect) {\n    var $63 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($64) {\n        return $63(Effect_Console.time($64));\n    };\n};\nvar logShow = function (dictMonadEffect) {\n    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);\n    return function (dictShow) {\n        var $65 = Effect_Console.logShow(dictShow);\n        return function ($66) {\n            return liftEffect($65($66));\n        };\n    };\n};\nvar log = function (dictMonadEffect) {\n    var $67 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($68) {\n        return $67(Effect_Console.log($68));\n    };\n};\nvar infoShow = function (dictMonadEffect) {\n    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);\n    return function (dictShow) {\n        var $69 = Effect_Console.infoShow(dictShow);\n        return function ($70) {\n            return liftEffect($69($70));\n        };\n    };\n};\nvar info = function (dictMonadEffect) {\n    var $71 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($72) {\n        return $71(Effect_Console.info($72));\n    };\n};\nvar groupEnd = function (dictMonadEffect) {\n    return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.groupEnd);\n};\nvar groupCollapsed = function (dictMonadEffect) {\n    var $73 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($74) {\n        return $73(Effect_Console.groupCollapsed($74));\n    };\n};\nvar group = function (dictMonadEffect) {\n    var $75 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($76) {\n        return $75(Effect_Console.group($76));\n    };\n};\nvar grouped = function (dictMonadEffect) {\n    var Monad0 = dictMonadEffect.Monad0();\n    var Bind1 = Monad0.Bind1();\n    var discard1 = discard(Bind1);\n    var group1 = group(dictMonadEffect);\n    var bind = Control_Bind.bind(Bind1);\n    var groupEnd1 = groupEnd(dictMonadEffect);\n    var pure = Control_Applicative.pure(Monad0.Applicative0());\n    return function (name) {\n        return function (inner) {\n            return discard1(group1(name))(function () {\n                return bind(inner)(function (result) {\n                    return discard1(groupEnd1)(function () {\n                        return pure(result);\n                    });\n                });\n            });\n        };\n    };\n};\nvar errorShow = function (dictMonadEffect) {\n    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);\n    return function (dictShow) {\n        var $77 = Effect_Console.errorShow(dictShow);\n        return function ($78) {\n            return liftEffect($77($78));\n        };\n    };\n};\nvar error = function (dictMonadEffect) {\n    var $79 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($80) {\n        return $79(Effect_Console.error($80));\n    };\n};\nvar debugShow = function (dictMonadEffect) {\n    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);\n    return function (dictShow) {\n        var $81 = Effect_Console.debugShow(dictShow);\n        return function ($82) {\n            return liftEffect($81($82));\n        };\n    };\n};\nvar debug = function (dictMonadEffect) {\n    var $83 = Effect_Class.liftEffect(dictMonadEffect);\n    return function ($84) {\n        return $83(Effect_Console.debug($84));\n    };\n};\nvar clear = function (dictMonadEffect) {\n    return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.clear);\n};\nexport {\n    log,\n    logShow,\n    warn,\n    warnShow,\n    error,\n    errorShow,\n    info,\n    infoShow,\n    debug,\n    debugShow,\n    time,\n    timeLog,\n    timeEnd,\n    clear,\n    group,\n    groupCollapsed,\n    groupEnd,\n    grouped\n};\n", "// module Partial.Unsafe\n\nexport const _unsafePartial = function (f) {\n  return f();\n};\n", "// module Partial\n\nexport const _crashWith = function (msg) {\n  throw new Error(msg);\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nvar crashWith = function () {\n    return $foreign[\"_crashWith\"];\n};\nvar crashWith1 = /* #__PURE__ */ crashWith();\nvar crash = function () {\n    return crashWith1(\"Partial.crash: partial function\");\n};\nexport {\n    crash,\n    crashWith\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Partial from \"../Partial/index.js\";\nvar crashWith = /* #__PURE__ */ Partial.crashWith();\nvar unsafePartial = $foreign[\"_unsafePartial\"];\nvar unsafeCrashWith = function (msg) {\n    return unsafePartial(function () {\n        return crashWith(msg);\n    });\n};\nexport {\n    unsafePartial,\n    unsafeCrashWith\n};\n", "// Generated by purs version 0.15.15\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Data_Array from \"../Data.Array/index.js\";\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nimport * as Data_Foldable from \"../Data.Foldable/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Monoid from \"../Data.Monoid/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_Traversable from \"../Data.Traversable/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Effect from \"../Effect/index.js\";\nimport * as Effect_Class from \"../Effect.Class/index.js\";\nimport * as Effect_Class_Console from \"../Effect.Class.Console/index.js\";\nimport * as Effect_Ref from \"../Effect.Ref/index.js\";\nimport * as Partial_Unsafe from \"../Partial.Unsafe/index.js\";\nvar append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);\nvar traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect);\nvar map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);\nvar zipWithA = /* #__PURE__ */ Data_Array.zipWithA(Effect.applicativeEffect);\nvar pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);\nvar mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Effect.functorEffect);\nvar $$void = /* #__PURE__ */ Data_Functor[\"void\"](Effect.functorEffect);\nvar traverse_ = /* #__PURE__ */ Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray);\nvar intercalate = /* #__PURE__ */ Data_Array.intercalate(Data_Monoid.monoidString);\nvar mapFlipped1 = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Functor.functorArray);\nvar Tree = /* #__PURE__ */ (function () {\n    function Tree(value0, value1) {\n        this.value0 = value0;\n        this.value1 = value1;\n    };\n    Tree.create = function (value0) {\n        return function (value1) {\n            return new Tree(value0, value1);\n        };\n    };\n    return Tree;\n})();\nvar Tooth = /* #__PURE__ */ (function () {\n    function Tooth(value0, value1, value2) {\n        this.value0 = value0;\n        this.value1 = value1;\n        this.value2 = value2;\n    };\n    Tooth.create = function (value0) {\n        return function (value1) {\n            return function (value2) {\n                return new Tooth(value0, value1, value2);\n            };\n        };\n    };\n    return Tooth;\n})();\nvar InjectDiff = /* #__PURE__ */ (function () {\n    function InjectDiff(value0) {\n        this.value0 = value0;\n    };\n    InjectDiff.create = function (value0) {\n        return new InjectDiff(value0);\n    };\n    return InjectDiff;\n})();\nvar PlusDiff = /* #__PURE__ */ (function () {\n    function PlusDiff(value0, value1) {\n        this.value0 = value0;\n        this.value1 = value1;\n    };\n    PlusDiff.create = function (value0) {\n        return function (value1) {\n            return new PlusDiff(value0, value1);\n        };\n    };\n    return PlusDiff;\n})();\nvar MinusDiff = /* #__PURE__ */ (function () {\n    function MinusDiff(value0, value1) {\n        this.value0 = value0;\n        this.value1 = value1;\n    };\n    MinusDiff.create = function (value0) {\n        return function (value1) {\n            return new MinusDiff(value0, value1);\n        };\n    };\n    return MinusDiff;\n})();\nvar ReplaceDiff = /* #__PURE__ */ (function () {\n    function ReplaceDiff(value0) {\n        this.value0 = value0;\n    };\n    ReplaceDiff.create = function (value0) {\n        return new ReplaceDiff(value0);\n    };\n    return ReplaceDiff;\n})();\nvar IdDiff = /* #__PURE__ */ (function () {\n    function IdDiff() {\n\n    };\n    IdDiff.value = new IdDiff();\n    return IdDiff;\n})();\nvar CutDiff = /* #__PURE__ */ (function () {\n    function CutDiff(value0) {\n        this.value0 = value0;\n    };\n    CutDiff.create = function (value0) {\n        return new CutDiff(value0);\n    };\n    return CutDiff;\n})();\nvar PasteDiff = /* #__PURE__ */ (function () {\n    function PasteDiff() {\n\n    };\n    PasteDiff.value = new PasteDiff();\n    return PasteDiff;\n})();\nvar unsafeFromJust = function (v) {\n    if (v instanceof Data_Maybe.Nothing) {\n        return Partial_Unsafe.unsafeCrashWith(\"unsafeFromJust Nothing\");\n    };\n    if (v instanceof Data_Maybe.Just) {\n        return v.value0;\n    };\n    throw new Error(\"Failed pattern match at Main (line 170, column 18 - line 172, column 14): \" + [ v.constructor.name ]);\n};\nvar unTooth = function (v) {\n    return function (t) {\n        return new Tree(v.value0, append(v.value1)(append([ t ])(v.value2)));\n    };\n};\nvar fromTreeCreateElement = function (v) {\n    return function __do() {\n        var es = traverse(fromTreeCreateElement)(v.value1)();\n        return $foreign.createElement(v.value0)(es)();\n    };\n};\nvar examples = /* #__PURE__ */ (function () {\n    return [ {\n        label: \"insert {X Y1 {} Y2} at A1\",\n        diff: new PlusDiff(new Tooth(\"X\", [ new Tree(\"Y1\", [  ]) ], [ new Tree(\"Y2\", [  ]) ]), IdDiff.value)\n    }, {\n        label: \"insert {X Y1 {} Y2} at B2\",\n        diff: new InjectDiff([ IdDiff.value, new PlusDiff(new Tooth(\"X\", [ new Tree(\"Y1\", [  ]) ], [ new Tree(\"Y2\", [  ]) ]), IdDiff.value), IdDiff.value ])\n    }, {\n        label: \"remove {B2 C4 {} C6}\",\n        diff: new InjectDiff([ IdDiff.value, new MinusDiff(1, IdDiff.value), IdDiff.value ])\n    }, {\n        label: \"cut B1 ...\",\n        diff: new InjectDiff([ new CutDiff(\"HOLE\"), IdDiff.value, IdDiff.value ])\n    }, {\n        label: \"... then paste onto B3\",\n        diff: new InjectDiff([ IdDiff.value, IdDiff.value, PasteDiff.value ])\n    } ];\n})();\nvar example_tree = /* #__PURE__ */ (function () {\n    return new Tree(\"A1\", [ new Tree(\"B1\", [ new Tree(\"C1\", [  ]), new Tree(\"C2\", [  ]), new Tree(\"C3\", [  ]) ]), new Tree(\"B2\", [ new Tree(\"C4\", [  ]), new Tree(\"C5\", [  ]), new Tree(\"C6\", [  ]) ]), new Tree(\"B3\", [ new Tree(\"C7\", [  ]), new Tree(\"C8\", [  ]), new Tree(\"C9\", [  ]) ]) ]);\n})();\nvar applyTreeDiffToTree = function (v) {\n    return function (v1) {\n        if (v instanceof InjectDiff) {\n            return map(Tree.create(v1.value0))(zipWithA(applyTreeDiffToTree)(v.value0)(v1.value1));\n        };\n        if (v instanceof PlusDiff) {\n            return map(unTooth(v.value0))(applyTreeDiffToTree(v.value1)(v1));\n        };\n        if (v instanceof MinusDiff) {\n            return applyTreeDiffToTree(v.value1)(unsafeFromJust(Data_Array.index(v1.value1)(v.value0)));\n        };\n        if (v instanceof ReplaceDiff) {\n            return pure(v.value0);\n        };\n        if (v instanceof IdDiff) {\n            return pure(v1);\n        };\n        if (v instanceof CutDiff) {\n            return pure(new Tree(v.value0, [  ]));\n        };\n        if (v instanceof PasteDiff) {\n            return mapFlipped($foreign.get_clipboard)(function (v2) {\n                return v2.tree;\n            });\n        };\n        throw new Error(\"Failed pattern match at Main (line 83, column 1 - line 83, column 55): \" + [ v.constructor.name, v1.constructor.name ]);\n    };\n};\nvar applyTreeDiffToDom$prime = function (v) {\n    return function (v1) {\n        if (v instanceof InjectDiff) {\n            return $$void(zipWithA(applyTreeDiffToDom$prime)(v.value0)(v1.value1));\n        };\n        if (v instanceof PlusDiff) {\n            return function __do() {\n                applyTreeDiffToDom$prime(v.value1)(v1)();\n                var es_left = traverse(fromTreeCreateElement)(v.value0.value1)();\n                var e2 = $foreign.getElement(v1.value0)();\n                var es_right = traverse(fromTreeCreateElement)(v.value0.value2)();\n                var e_parent = $foreign.getParent(e2)();\n                var e1 = $foreign.createElement(v.value0.value0)([  ])();\n                $foreign.replaceKid(e_parent)({\n                    old: e2,\n                    \"new\": e1\n                })();\n                traverse_($foreign.addKid(e1))(es_left)();\n                $foreign.addKid(e1)(e2)();\n                return traverse_($foreign.addKid(e1))(es_right)();\n            };\n        };\n        if (v instanceof MinusDiff) {\n            return function __do() {\n                var e = $foreign.getElement(v1.value0)();\n                var v2 = unsafeFromJust(Data_Array.index(v1.value1)(v.value0));\n                applyTreeDiffToDom$prime(v.value1)(v2)();\n                var e_kid = $foreign.getElement(v2.value0)();\n                var e_parent = $foreign.getParent(e)();\n                return $foreign.replaceKid(e_parent)({\n                    old: e,\n                    \"new\": e_kid\n                })();\n            };\n        };\n        if (v instanceof ReplaceDiff) {\n            return function __do() {\n                var e = $foreign.getElement(v1.value0)();\n                var e_parent = $foreign.getParent(e)();\n                var e$prime = fromTreeCreateElement(v.value0)();\n                return $foreign.replaceKid(e_parent)({\n                    old: e,\n                    \"new\": e$prime\n                })();\n            };\n        };\n        if (v instanceof IdDiff) {\n            return pure(Data_Unit.unit);\n        };\n        if (v instanceof CutDiff) {\n            return function __do() {\n                var e = $foreign.getElement(v1.value0)();\n                var e_parent = $foreign.getParent(e)();\n                var e$prime = $foreign.createElement(v.value0)([  ])();\n                $foreign.replaceKid(e_parent)({\n                    old: e,\n                    \"new\": e$prime\n                })();\n                $foreign.set_clipboard({\n                    tree: v1,\n                    element: e\n                })();\n                return Data_Unit.unit;\n            };\n        };\n        if (v instanceof PasteDiff) {\n            return function __do() {\n                var e = $foreign.getElement(v1.value0)();\n                var e_parent = $foreign.getParent(e)();\n                var clipboard = $foreign.get_clipboard();\n                $foreign.replaceKid(e_parent)({\n                    old: e,\n                    \"new\": clipboard.element\n                })();\n                return Data_Unit.unit;\n            };\n        };\n        throw new Error(\"Failed pattern match at Main (line 106, column 1 - line 106, column 55): \" + [ v.constructor.name, v1.constructor.name ]);\n    };\n};\nvar _Show_Tree = {\n    show: function (v) {\n        if (Data_Array[\"null\"](v.value1)) {\n            return v.value0;\n        };\n        if (Data_Boolean.otherwise) {\n            return \"(\" + (v.value0 + (\" \" + (intercalate(\" \")(mapFlipped1(v.value1)(Data_Show.show(_Show_Tree))) + \")\")));\n        };\n        throw new Error(\"Failed pattern match at Main (line 61, column 1 - line 64, column 85): \" + [ v.constructor.name ]);\n    }\n};\nvar show = /* #__PURE__ */ Data_Show.show(_Show_Tree);\nvar applyTreeDiffToDom = function (d) {\n    return function (t_ref) {\n        return function __do() {\n            var t = Effect_Ref.read(t_ref)();\n            var t$prime = applyTreeDiffToTree(d)(t)();\n            Effect_Ref.write(t$prime)(t_ref)();\n            $foreign.setTreeDisplay(show(t$prime))();\n            return applyTreeDiffToDom$prime(d)(t)();\n        };\n    };\n};\nvar fromTreeCreateDom = function (t) {\n    return function __do() {\n        $foreign.setTreeDisplay(show(t))();\n        var e = fromTreeCreateElement(t)();\n        var c = $foreign.getContainer();\n        return $foreign.addKid(c)(e)();\n    };\n};\nvar main = function __do() {\n    Effect_Class_Console.log(Effect_Class.monadEffectEffect)(\"[main]\")();\n    var tree_ref = Effect_Ref[\"new\"](example_tree)();\n    fromTreeCreateDom(example_tree)();\n    var examples_container = $foreign.getElementById(\"examples\")();\n    traverse_(function (v) {\n        return function __do() {\n            var btn = $foreign.createButton({\n                label: v.label,\n                onclick: applyTreeDiffToDom(v.diff)(tree_ref)\n            })();\n            return $foreign.addKid(examples_container)(btn)();\n        };\n    })(examples)();\n    return Data_Unit.unit;\n};\nexport {\n    getElement,\n    createElement,\n    addKid,\n    getContainer,\n    getParent,\n    replaceKid,\n    createButton,\n    getElementById,\n    setTreeDisplay,\n    removeKid,\n    set_clipboard,\n    get_clipboard\n} from \"./foreign.js\";\nexport {\n    example_tree,\n    examples,\n    main,\n    Tree,\n    Tooth,\n    unTooth,\n    InjectDiff,\n    PlusDiff,\n    MinusDiff,\n    ReplaceDiff,\n    IdDiff,\n    CutDiff,\n    PasteDiff,\n    applyTreeDiffToTree,\n    applyTreeDiffToDom,\n    applyTreeDiffToDom$prime,\n    fromTreeCreateDom,\n    fromTreeCreateElement,\n    unsafeFromJust,\n    _Show_Tree\n};\n"],
  "mappings": "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",
  "names": ["identity", "map", "identity", "apply", "bind", "pure", "Nothing", "Just", "applySecond", "pure", "append", "mempty", "append", "mempty", "apply", "map", "pure", "top", "identity", "traverse2", "identity", "sequence", "sequence1", "sequence", "intercalate", "log", "crashWith", "append", "traverse", "map", "zipWithA", "pure", "mapFlipped", "$$void", "traverse_", "intercalate", "Tree", "Tooth", "InjectDiff", "PlusDiff", "MinusDiff", "ReplaceDiff", "IdDiff", "CutDiff", "PasteDiff", "__do", "clipboard", "show", "log"]
}
